// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddRoleToUser(params *AddRoleToUserParams, opts ...ClientOption) (*AddRoleToUserOK, error)

	AddRoleToUserAtScope(params *AddRoleToUserAtScopeParams, opts ...ClientOption) (*AddRoleToUserAtScopeOK, error)

	AddUser(params *AddUserParams, opts ...ClientOption) (*AddUserOK, error)

	AddUserToken(params *AddUserTokenParams, opts ...ClientOption) (*AddUserTokenOK, error)

	DeleteUser(params *DeleteUserParams, opts ...ClientOption) error

	DeleteUserField(params *DeleteUserFieldParams, opts ...ClientOption) error

	DeleteUserToken(params *DeleteUserTokenParams, opts ...ClientOption) error

	GetAllUserGroups(params *GetAllUserGroupsParams, opts ...ClientOption) (*GetAllUserGroupsOK, error)

	GetAllUserRoles(params *GetAllUserRolesParams, opts ...ClientOption) (*GetAllUserRolesOK, error)

	GetAllUsers(params *GetAllUsersParams, opts ...ClientOption) (*GetAllUsersOK, error)

	GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error)

	GetUserField(params *GetUserFieldParams, opts ...ClientOption) (*GetUserFieldOK, error)

	GetUserGroup(params *GetUserGroupParams, opts ...ClientOption) (*GetUserGroupOK, error)

	GetUserPermissions(params *GetUserPermissionsParams, opts ...ClientOption) (*GetUserPermissionsOK, error)

	GetUserProperties(params *GetUserPropertiesParams, opts ...ClientOption) (*GetUserPropertiesOK, error)

	GetUserProperty(params *GetUserPropertyParams, opts ...ClientOption) (*GetUserPropertyOK, error)

	GetUserRolesAtScope(params *GetUserRolesAtScopeParams, opts ...ClientOption) (*GetUserRolesAtScopeOK, error)

	GetUserTokens(params *GetUserTokensParams, opts ...ClientOption) (*GetUserTokensOK, error)

	RemoveUserFromGroup(params *RemoveUserFromGroupParams, opts ...ClientOption) error

	RemoveUserProperty(params *RemoveUserPropertyParams, opts ...ClientOption) error

	RemoveUserRememberMe(params *RemoveUserRememberMeParams, opts ...ClientOption) error

	RemoveUserRoleAtScope(params *RemoveUserRoleAtScopeParams, opts ...ClientOption) error

	ReplaceUser(params *ReplaceUserParams, opts ...ClientOption) (*ReplaceUserOK, error)

	SetUserField(params *SetUserFieldParams, opts ...ClientOption) (*SetUserFieldOK, error)

	SetUserGroups(params *SetUserGroupsParams, opts ...ClientOption) (*SetUserGroupsOK, error)

	SetUserProperty(params *SetUserPropertyParams, opts ...ClientOption) (*SetUserPropertyOK, error)

	SetUserRoles(params *SetUserRolesParams, opts ...ClientOption) (*SetUserRolesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddRoleToUser adds a role to the matching user
*/
func (a *Client) AddRoleToUser(params *AddRoleToUserParams, opts ...ClientOption) (*AddRoleToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRoleToUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRoleToUser",
		Method:             "POST",
		PathPattern:        "/app/rest/users/{userLocator}/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddRoleToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRoleToUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addRoleToUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddRoleToUserAtScope adds a role with the specific scope to the matching user
*/
func (a *Client) AddRoleToUserAtScope(params *AddRoleToUserAtScopeParams, opts ...ClientOption) (*AddRoleToUserAtScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRoleToUserAtScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRoleToUserAtScope",
		Method:             "PUT",
		PathPattern:        "/app/rest/users/{userLocator}/roles/{roleId}/{scope}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddRoleToUserAtScopeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRoleToUserAtScopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addRoleToUserAtScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddUser creates a new user
*/
func (a *Client) AddUser(params *AddUserParams, opts ...ClientOption) (*AddUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUser",
		Method:             "POST",
		PathPattern:        "/app/rest/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddUserToken creates a new authentication token for the matching user
*/
func (a *Client) AddUserToken(params *AddUserTokenParams, opts ...ClientOption) (*AddUserTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserToken",
		Method:             "POST",
		PathPattern:        "/app/rest/users/{userLocator}/tokens",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteUser deletes user matching the locator
*/
func (a *Client) DeleteUser(params *DeleteUserParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/app/rest/users/{userLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteUserField removes a property of the matching user
*/
func (a *Client) DeleteUserField(params *DeleteUserFieldParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserField",
		Method:             "DELETE",
		PathPattern:        "/app/rest/users/{userLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteUserToken removes an authentication token from the matching user
*/
func (a *Client) DeleteUserToken(params *DeleteUserTokenParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserToken",
		Method:             "DELETE",
		PathPattern:        "/app/rest/users/{userLocator}/tokens/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAllUserGroups gets all groups of the matching user
*/
func (a *Client) GetAllUserGroups(params *GetAllUserGroupsParams, opts ...ClientOption) (*GetAllUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUserGroups",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/groups",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUserGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUserRoles gets all user roles of the matching user
*/
func (a *Client) GetAllUserRoles(params *GetAllUserRolesParams, opts ...ClientOption) (*GetAllUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUserRoles",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUserRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllUsers gets all users
*/
func (a *Client) GetAllUsers(params *GetAllUsersParams, opts ...ClientOption) (*GetAllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsers",
		Method:             "GET",
		PathPattern:        "/app/rest/users",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUser gets user matching the locator
*/
func (a *Client) GetUser(params *GetUserParams, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserField gets a field of the matching user
*/
func (a *Client) GetUserField(params *GetUserFieldParams, opts ...ClientOption) (*GetUserFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserField",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserGroup gets a user group of the matching user
*/
func (a *Client) GetUserGroup(params *GetUserGroupParams, opts ...ClientOption) (*GetUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserGroup",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/groups/{groupLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserPermissions gets all permissions effective for the matching user
*/
func (a *Client) GetUserPermissions(params *GetUserPermissionsParams, opts ...ClientOption) (*GetUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserPermissions",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/permissions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserPermissions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserProperties gets all properties of the matching user
*/
func (a *Client) GetUserProperties(params *GetUserPropertiesParams, opts ...ClientOption) (*GetUserPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserProperties",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserProperty gets a property of the matching user
*/
func (a *Client) GetUserProperty(params *GetUserPropertyParams, opts ...ClientOption) (*GetUserPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserProperty",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/properties/{name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPropertyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserPropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserRolesAtScope gets a user role with the specific scope from the matching user
*/
func (a *Client) GetUserRolesAtScope(params *GetUserRolesAtScopeParams, opts ...ClientOption) (*GetUserRolesAtScopeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserRolesAtScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserRolesAtScope",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/roles/{roleId}/{scope}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserRolesAtScopeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserRolesAtScopeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserRolesAtScope: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserTokens gets all authentication tokens of the matching user
*/
func (a *Client) GetUserTokens(params *GetUserTokensParams, opts ...ClientOption) (*GetUserTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserTokens",
		Method:             "GET",
		PathPattern:        "/app/rest/users/{userLocator}/tokens",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserTokensReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserTokens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveUserFromGroup removes the matching user from the specific group
*/
func (a *Client) RemoveUserFromGroup(params *RemoveUserFromGroupParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserFromGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeUserFromGroup",
		Method:             "DELETE",
		PathPattern:        "/app/rest/users/{userLocator}/groups/{groupLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUserFromGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  RemoveUserProperty removes a property of the matching user
*/
func (a *Client) RemoveUserProperty(params *RemoveUserPropertyParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeUserProperty",
		Method:             "DELETE",
		PathPattern:        "/app/rest/users/{userLocator}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUserPropertyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  RemoveUserRememberMe removes the remember me data of the matching user
*/
func (a *Client) RemoveUserRememberMe(params *RemoveUserRememberMeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserRememberMeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeUserRememberMe",
		Method:             "DELETE",
		PathPattern:        "/app/rest/users/{userLocator}/debug/rememberMe",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUserRememberMeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  RemoveUserRoleAtScope removes a role with the specific scope from the matching user
*/
func (a *Client) RemoveUserRoleAtScope(params *RemoveUserRoleAtScopeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserRoleAtScopeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeUserRoleAtScope",
		Method:             "DELETE",
		PathPattern:        "/app/rest/users/{userLocator}/roles/{roleId}/{scope}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUserRoleAtScopeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  ReplaceUser updates user matching the locator
*/
func (a *Client) ReplaceUser(params *ReplaceUserParams, opts ...ClientOption) (*ReplaceUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceUser",
		Method:             "PUT",
		PathPattern:        "/app/rest/users/{userLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetUserField updates a field of the matching user
*/
func (a *Client) SetUserField(params *SetUserFieldParams, opts ...ClientOption) (*SetUserFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUserField",
		Method:             "PUT",
		PathPattern:        "/app/rest/users/{userLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUserFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUserField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetUserGroups updates groups of the matching user
*/
func (a *Client) SetUserGroups(params *SetUserGroupsParams, opts ...ClientOption) (*SetUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUserGroups",
		Method:             "PUT",
		PathPattern:        "/app/rest/users/{userLocator}/groups",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetUserProperty updates a property of the matching user
*/
func (a *Client) SetUserProperty(params *SetUserPropertyParams, opts ...ClientOption) (*SetUserPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUserProperty",
		Method:             "PUT",
		PathPattern:        "/app/rest/users/{userLocator}/properties/{name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserPropertyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUserPropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUserProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetUserRoles updates user roles of the matching user
*/
func (a *Client) SetUserRoles(params *SetUserRolesParams, opts ...ClientOption) (*SetUserRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUserRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setUserRoles",
		Method:             "PUT",
		PathPattern:        "/app/rest/users/{userLocator}/roles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUserRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUserRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setUserRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
