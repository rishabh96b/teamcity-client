// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemoveUserRoleAtScopeParams creates a new RemoveUserRoleAtScopeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRemoveUserRoleAtScopeParams() *RemoveUserRoleAtScopeParams {
	return &RemoveUserRoleAtScopeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveUserRoleAtScopeParamsWithTimeout creates a new RemoveUserRoleAtScopeParams object
// with the ability to set a timeout on a request.
func NewRemoveUserRoleAtScopeParamsWithTimeout(timeout time.Duration) *RemoveUserRoleAtScopeParams {
	return &RemoveUserRoleAtScopeParams{
		timeout: timeout,
	}
}

// NewRemoveUserRoleAtScopeParamsWithContext creates a new RemoveUserRoleAtScopeParams object
// with the ability to set a context for a request.
func NewRemoveUserRoleAtScopeParamsWithContext(ctx context.Context) *RemoveUserRoleAtScopeParams {
	return &RemoveUserRoleAtScopeParams{
		Context: ctx,
	}
}

// NewRemoveUserRoleAtScopeParamsWithHTTPClient creates a new RemoveUserRoleAtScopeParams object
// with the ability to set a custom HTTPClient for a request.
func NewRemoveUserRoleAtScopeParamsWithHTTPClient(client *http.Client) *RemoveUserRoleAtScopeParams {
	return &RemoveUserRoleAtScopeParams{
		HTTPClient: client,
	}
}

/* RemoveUserRoleAtScopeParams contains all the parameters to send to the API endpoint
   for the remove user role at scope operation.

   Typically these are written to a http.Request.
*/
type RemoveUserRoleAtScopeParams struct {

	// RoleID.
	RoleID string

	// Scope.
	Scope string

	// UserLocator.
	//
	// Format: UserLocator
	UserLocator string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the remove user role at scope params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveUserRoleAtScopeParams) WithDefaults() *RemoveUserRoleAtScopeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the remove user role at scope params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RemoveUserRoleAtScopeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) WithTimeout(timeout time.Duration) *RemoveUserRoleAtScopeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) WithContext(ctx context.Context) *RemoveUserRoleAtScopeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) WithHTTPClient(client *http.Client) *RemoveUserRoleAtScopeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRoleID adds the roleID to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) WithRoleID(roleID string) *RemoveUserRoleAtScopeParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) SetRoleID(roleID string) {
	o.RoleID = roleID
}

// WithScope adds the scope to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) WithScope(scope string) *RemoveUserRoleAtScopeParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) SetScope(scope string) {
	o.Scope = scope
}

// WithUserLocator adds the userLocator to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) WithUserLocator(userLocator string) *RemoveUserRoleAtScopeParams {
	o.SetUserLocator(userLocator)
	return o
}

// SetUserLocator adds the userLocator to the remove user role at scope params
func (o *RemoveUserRoleAtScopeParams) SetUserLocator(userLocator string) {
	o.UserLocator = userLocator
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveUserRoleAtScopeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param roleId
	if err := r.SetPathParam("roleId", o.RoleID); err != nil {
		return err
	}

	// path param scope
	if err := r.SetPathParam("scope", o.Scope); err != nil {
		return err
	}

	// path param userLocator
	if err := r.SetPathParam("userLocator", o.UserLocator); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
