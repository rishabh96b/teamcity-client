// Code generated by go-swagger; DO NOT EDIT.

package vcs_root

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vcs root API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vcs root API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddVcsRoot(params *AddVcsRootParams, opts ...ClientOption) (*AddVcsRootOK, error)

	DeleteAllVcsRootProperties(params *DeleteAllVcsRootPropertiesParams, opts ...ClientOption) error

	DeleteVcsRoot(params *DeleteVcsRootParams, opts ...ClientOption) error

	DeleteVcsRootProperty(params *DeleteVcsRootPropertyParams, opts ...ClientOption) error

	GetAllVcsRootProperties(params *GetAllVcsRootPropertiesParams, opts ...ClientOption) (*GetAllVcsRootPropertiesOK, error)

	GetAllVcsRoots(params *GetAllVcsRootsParams, opts ...ClientOption) (*GetAllVcsRootsOK, error)

	GetRootEndpoints(params *GetRootEndpointsParams, opts ...ClientOption) (*GetRootEndpointsOK, error)

	GetVcsRootField(params *GetVcsRootFieldParams, opts ...ClientOption) (*GetVcsRootFieldOK, error)

	GetVcsRootInstances(params *GetVcsRootInstancesParams, opts ...ClientOption) (*GetVcsRootInstancesOK, error)

	GetVcsRootProperty(params *GetVcsRootPropertyParams, opts ...ClientOption) (*GetVcsRootPropertyOK, error)

	GetVcsRootSettingsFile(params *GetVcsRootSettingsFileParams, opts ...ClientOption) (*GetVcsRootSettingsFileOK, error)

	SetVcsRootField(params *SetVcsRootFieldParams, opts ...ClientOption) (*SetVcsRootFieldOK, error)

	SetVcsRootProperties(params *SetVcsRootPropertiesParams, opts ...ClientOption) (*SetVcsRootPropertiesOK, error)

	SetVcsRootProperty(params *SetVcsRootPropertyParams, opts ...ClientOption) (*SetVcsRootPropertyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddVcsRoot adds a new v c s root
*/
func (a *Client) AddVcsRoot(params *AddVcsRootParams, opts ...ClientOption) (*AddVcsRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVcsRootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVcsRoot",
		Method:             "POST",
		PathPattern:        "/app/rest/vcs-roots",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVcsRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVcsRootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVcsRoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllVcsRootProperties deletes all properties of the matching v c s root
*/
func (a *Client) DeleteAllVcsRootProperties(params *DeleteAllVcsRootPropertiesParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllVcsRootPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllVcsRootProperties",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllVcsRootPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteVcsRoot removes v c s root matching the locator
*/
func (a *Client) DeleteVcsRoot(params *DeleteVcsRootParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsRootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVcsRoot",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcsRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteVcsRootProperty deletes a property of the matching v c s root
*/
func (a *Client) DeleteVcsRootProperty(params *DeleteVcsRootPropertyParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsRootPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVcsRootProperty",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcsRootPropertyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAllVcsRootProperties gets all properties of the matching v c s root
*/
func (a *Client) GetAllVcsRootProperties(params *GetAllVcsRootPropertiesParams, opts ...ClientOption) (*GetAllVcsRootPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVcsRootPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVcsRootProperties",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllVcsRootPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVcsRootPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVcsRootProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllVcsRoots gets all v c s roots
*/
func (a *Client) GetAllVcsRoots(params *GetAllVcsRootsParams, opts ...ClientOption) (*GetAllVcsRootsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVcsRootsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVcsRoots",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllVcsRootsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVcsRootsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVcsRoots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRootEndpoints gets root endpoints
*/
func (a *Client) GetRootEndpoints(params *GetRootEndpointsParams, opts ...ClientOption) (*GetRootEndpointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRootEndpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRootEndpoints",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRootEndpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRootEndpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRootEndpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootField gets a field of the matching v c s root
*/
func (a *Client) GetVcsRootField(params *GetVcsRootFieldParams, opts ...ClientOption) (*GetVcsRootFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootField",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootInstances gets all v c s root instances of the matching v c s root
*/
func (a *Client) GetVcsRootInstances(params *GetVcsRootInstancesParams, opts ...ClientOption) (*GetVcsRootInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootInstances",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/instances",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootProperty gets a property on the matching v c s root
*/
func (a *Client) GetVcsRootProperty(params *GetVcsRootPropertyParams, opts ...ClientOption) (*GetVcsRootPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootProperty",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootPropertyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootPropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootSettingsFile gets the settings file of the matching v c s root
*/
func (a *Client) GetVcsRootSettingsFile(params *GetVcsRootSettingsFileParams, opts ...ClientOption) (*GetVcsRootSettingsFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootSettingsFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootSettingsFile",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/settingsFile",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootSettingsFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootSettingsFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootSettingsFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetVcsRootField updates a field of the matching v c s root
*/
func (a *Client) SetVcsRootField(params *SetVcsRootFieldParams, opts ...ClientOption) (*SetVcsRootFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetVcsRootFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setVcsRootField",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVcsRootFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetVcsRootFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setVcsRootField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetVcsRootProperties updates all properties of the matching v c s root
*/
func (a *Client) SetVcsRootProperties(params *SetVcsRootPropertiesParams, opts ...ClientOption) (*SetVcsRootPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetVcsRootPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setVcsRootProperties",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVcsRootPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetVcsRootPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setVcsRootProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetVcsRootProperty updates a property of the matching v c s root
*/
func (a *Client) SetVcsRootProperty(params *SetVcsRootPropertyParams, opts ...ClientOption) (*SetVcsRootPropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetVcsRootPropertyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setVcsRootProperty",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-roots/{vcsRootLocator}/properties/{name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVcsRootPropertyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetVcsRootPropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setVcsRootProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
