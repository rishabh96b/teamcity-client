// Code generated by go-swagger; DO NOT EDIT.

package build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetZippedFileOfBuildParams creates a new GetZippedFileOfBuildParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetZippedFileOfBuildParams() *GetZippedFileOfBuildParams {
	return &GetZippedFileOfBuildParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetZippedFileOfBuildParamsWithTimeout creates a new GetZippedFileOfBuildParams object
// with the ability to set a timeout on a request.
func NewGetZippedFileOfBuildParamsWithTimeout(timeout time.Duration) *GetZippedFileOfBuildParams {
	return &GetZippedFileOfBuildParams{
		timeout: timeout,
	}
}

// NewGetZippedFileOfBuildParamsWithContext creates a new GetZippedFileOfBuildParams object
// with the ability to set a context for a request.
func NewGetZippedFileOfBuildParamsWithContext(ctx context.Context) *GetZippedFileOfBuildParams {
	return &GetZippedFileOfBuildParams{
		Context: ctx,
	}
}

// NewGetZippedFileOfBuildParamsWithHTTPClient creates a new GetZippedFileOfBuildParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetZippedFileOfBuildParamsWithHTTPClient(client *http.Client) *GetZippedFileOfBuildParams {
	return &GetZippedFileOfBuildParams{
		HTTPClient: client,
	}
}

/* GetZippedFileOfBuildParams contains all the parameters to send to the API endpoint
   for the get zipped file of build operation.

   Typically these are written to a http.Request.
*/
type GetZippedFileOfBuildParams struct {

	// BasePath.
	BasePath *string

	// BuildLocator.
	//
	// Format: BuildLocator
	BuildLocator string

	// Locator.
	Locator *string

	// LogBuildUsage.
	LogBuildUsage *bool

	// Name.
	Name *string

	// Path.
	Path string

	// ResolveParameters.
	ResolveParameters *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get zipped file of build params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetZippedFileOfBuildParams) WithDefaults() *GetZippedFileOfBuildParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get zipped file of build params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetZippedFileOfBuildParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithTimeout(timeout time.Duration) *GetZippedFileOfBuildParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithContext(ctx context.Context) *GetZippedFileOfBuildParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithHTTPClient(client *http.Client) *GetZippedFileOfBuildParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBasePath adds the basePath to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithBasePath(basePath *string) *GetZippedFileOfBuildParams {
	o.SetBasePath(basePath)
	return o
}

// SetBasePath adds the basePath to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetBasePath(basePath *string) {
	o.BasePath = basePath
}

// WithBuildLocator adds the buildLocator to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithBuildLocator(buildLocator string) *GetZippedFileOfBuildParams {
	o.SetBuildLocator(buildLocator)
	return o
}

// SetBuildLocator adds the buildLocator to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetBuildLocator(buildLocator string) {
	o.BuildLocator = buildLocator
}

// WithLocator adds the locator to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithLocator(locator *string) *GetZippedFileOfBuildParams {
	o.SetLocator(locator)
	return o
}

// SetLocator adds the locator to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetLocator(locator *string) {
	o.Locator = locator
}

// WithLogBuildUsage adds the logBuildUsage to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithLogBuildUsage(logBuildUsage *bool) *GetZippedFileOfBuildParams {
	o.SetLogBuildUsage(logBuildUsage)
	return o
}

// SetLogBuildUsage adds the logBuildUsage to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetLogBuildUsage(logBuildUsage *bool) {
	o.LogBuildUsage = logBuildUsage
}

// WithName adds the name to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithName(name *string) *GetZippedFileOfBuildParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetName(name *string) {
	o.Name = name
}

// WithPath adds the path to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithPath(path string) *GetZippedFileOfBuildParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetPath(path string) {
	o.Path = path
}

// WithResolveParameters adds the resolveParameters to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) WithResolveParameters(resolveParameters *bool) *GetZippedFileOfBuildParams {
	o.SetResolveParameters(resolveParameters)
	return o
}

// SetResolveParameters adds the resolveParameters to the get zipped file of build params
func (o *GetZippedFileOfBuildParams) SetResolveParameters(resolveParameters *bool) {
	o.ResolveParameters = resolveParameters
}

// WriteToRequest writes these params to a swagger request
func (o *GetZippedFileOfBuildParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BasePath != nil {

		// query param basePath
		var qrBasePath string

		if o.BasePath != nil {
			qrBasePath = *o.BasePath
		}
		qBasePath := qrBasePath
		if qBasePath != "" {

			if err := r.SetQueryParam("basePath", qBasePath); err != nil {
				return err
			}
		}
	}

	// path param buildLocator
	if err := r.SetPathParam("buildLocator", o.BuildLocator); err != nil {
		return err
	}

	if o.Locator != nil {

		// query param locator
		var qrLocator string

		if o.Locator != nil {
			qrLocator = *o.Locator
		}
		qLocator := qrLocator
		if qLocator != "" {

			if err := r.SetQueryParam("locator", qLocator); err != nil {
				return err
			}
		}
	}

	if o.LogBuildUsage != nil {

		// query param logBuildUsage
		var qrLogBuildUsage bool

		if o.LogBuildUsage != nil {
			qrLogBuildUsage = *o.LogBuildUsage
		}
		qLogBuildUsage := swag.FormatBool(qrLogBuildUsage)
		if qLogBuildUsage != "" {

			if err := r.SetQueryParam("logBuildUsage", qLogBuildUsage); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	if o.ResolveParameters != nil {

		// query param resolveParameters
		var qrResolveParameters bool

		if o.ResolveParameters != nil {
			qrResolveParameters = *o.ResolveParameters
		}
		qResolveParameters := swag.FormatBool(qrResolveParameters)
		if qResolveParameters != "" {

			if err := r.SetQueryParam("resolveParameters", qResolveParameters); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
