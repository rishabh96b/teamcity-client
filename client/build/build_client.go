// Code generated by go-swagger; DO NOT EDIT.

package build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new build API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddBuildVcsLabel(params *AddBuildVcsLabelParams, opts ...ClientOption) (*AddBuildVcsLabelOK, error)

	AddLogMessageToBuild(params *AddLogMessageToBuildParams, opts ...ClientOption) error

	AddProblemToBuild(params *AddProblemToBuildParams, opts ...ClientOption) (*AddProblemToBuildOK, error)

	AddTagsToBuild(params *AddTagsToBuildParams, opts ...ClientOption) (*AddTagsToBuildOK, error)

	AddTagsToMultipleBuilds(params *AddTagsToMultipleBuildsParams, opts ...ClientOption) (*AddTagsToMultipleBuildsOK, error)

	DeleteBuild(params *DeleteBuildParams, opts ...ClientOption) error

	DeleteBuildComment(params *DeleteBuildCommentParams, opts ...ClientOption) error

	DeleteMultipleBuildComments(params *DeleteMultipleBuildCommentsParams, opts ...ClientOption) (*DeleteMultipleBuildCommentsOK, error)

	DeleteMultipleBuilds(params *DeleteMultipleBuildsParams, opts ...ClientOption) (*DeleteMultipleBuildsOK, error)

	DownloadFileOfBuild(params *DownloadFileOfBuildParams, opts ...ClientOption) error

	GetAggregatedBuildStatus(params *GetAggregatedBuildStatusParams, opts ...ClientOption) (*GetAggregatedBuildStatusOK, error)

	GetAggregatedBuildStatusIcon(params *GetAggregatedBuildStatusIconParams, opts ...ClientOption) error

	GetAllBuilds(params *GetAllBuildsParams, opts ...ClientOption) (*GetAllBuildsOK, error)

	GetArtifactDependencyChanges(params *GetArtifactDependencyChangesParams, opts ...ClientOption) (*GetArtifactDependencyChangesOK, error)

	GetArtifactsDirectory(params *GetArtifactsDirectoryParams, opts ...ClientOption) (*GetArtifactsDirectoryOK, error)

	GetBuild(params *GetBuildParams, opts ...ClientOption) (*GetBuildOK, error)

	GetBuildActualParameters(params *GetBuildActualParametersParams, opts ...ClientOption) (*GetBuildActualParametersOK, error)

	GetBuildField(params *GetBuildFieldParams, opts ...ClientOption) (*GetBuildFieldOK, error)

	GetBuildFinishDate(params *GetBuildFinishDateParams, opts ...ClientOption) (*GetBuildFinishDateOK, error)

	GetBuildNumber(params *GetBuildNumberParams, opts ...ClientOption) (*GetBuildNumberOK, error)

	GetBuildPinInfo(params *GetBuildPinInfoParams, opts ...ClientOption) (*GetBuildPinInfoOK, error)

	GetBuildProblems(params *GetBuildProblemsParams, opts ...ClientOption) (*GetBuildProblemsOK, error)

	GetBuildRelatedIssues(params *GetBuildRelatedIssuesParams, opts ...ClientOption) (*GetBuildRelatedIssuesOK, error)

	GetBuildResolved(params *GetBuildResolvedParams, opts ...ClientOption) (*GetBuildResolvedOK, error)

	GetBuildResultingProperties(params *GetBuildResultingPropertiesParams, opts ...ClientOption) (*GetBuildResultingPropertiesOK, error)

	GetBuildSourceFile(params *GetBuildSourceFileParams, opts ...ClientOption) error

	GetBuildStatisticValue(params *GetBuildStatisticValueParams, opts ...ClientOption) (*GetBuildStatisticValueOK, error)

	GetBuildStatisticValues(params *GetBuildStatisticValuesParams, opts ...ClientOption) (*GetBuildStatisticValuesOK, error)

	GetBuildStatusIcon(params *GetBuildStatusIconParams, opts ...ClientOption) error

	GetBuildStatusText(params *GetBuildStatusTextParams, opts ...ClientOption) (*GetBuildStatusTextOK, error)

	GetBuildTags(params *GetBuildTagsParams, opts ...ClientOption) (*GetBuildTagsOK, error)

	GetBuildTestOccurrences(params *GetBuildTestOccurrencesParams, opts ...ClientOption) (*GetBuildTestOccurrencesOK, error)

	GetBuildVcsLabels(params *GetBuildVcsLabelsParams, opts ...ClientOption) (*GetBuildVcsLabelsOK, error)

	GetCanceledInfo(params *GetCanceledInfoParams, opts ...ClientOption) (*GetCanceledInfoOK, error)

	GetFileMetadataOfBuild(params *GetFileMetadataOfBuildParams, opts ...ClientOption) (*GetFileMetadataOfBuildOK, error)

	GetFilesListForSubpathOfBuild(params *GetFilesListForSubpathOfBuildParams, opts ...ClientOption) (*GetFilesListForSubpathOfBuildOK, error)

	GetFilesListOfBuild(params *GetFilesListOfBuildParams, opts ...ClientOption) (*GetFilesListOfBuildOK, error)

	GetMultipleBuilds(params *GetMultipleBuildsParams, opts ...ClientOption) (*GetMultipleBuildsOK, error)

	GetZippedFileOfBuild(params *GetZippedFileOfBuildParams, opts ...ClientOption) error

	MarkBuildAsRunning(params *MarkBuildAsRunningParams, opts ...ClientOption) (*MarkBuildAsRunningOK, error)

	PinMultipleBuilds(params *PinMultipleBuildsParams, opts ...ClientOption) (*PinMultipleBuildsOK, error)

	RemoveMultipleBuildTags(params *RemoveMultipleBuildTagsParams, opts ...ClientOption) (*RemoveMultipleBuildTagsOK, error)

	ResetBuildFinishProperties(params *ResetBuildFinishPropertiesParams, opts ...ClientOption) error

	SetBuildComment(params *SetBuildCommentParams, opts ...ClientOption) error

	SetBuildFinishDate(params *SetBuildFinishDateParams, opts ...ClientOption) (*SetBuildFinishDateOK, error)

	SetBuildNumber(params *SetBuildNumberParams, opts ...ClientOption) (*SetBuildNumberOK, error)

	SetBuildPinInfo(params *SetBuildPinInfoParams, opts ...ClientOption) (*SetBuildPinInfoOK, error)

	SetBuildStatusText(params *SetBuildStatusTextParams, opts ...ClientOption) (*SetBuildStatusTextOK, error)

	SetBuildTags(params *SetBuildTagsParams, opts ...ClientOption) (*SetBuildTagsOK, error)

	SetFinishedTime(params *SetFinishedTimeParams, opts ...ClientOption) (*SetFinishedTimeOK, error)

	SetMultipleBuildComments(params *SetMultipleBuildCommentsParams, opts ...ClientOption) (*SetMultipleBuildCommentsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddBuildVcsLabel adds a v c s label to the matching build
*/
func (a *Client) AddBuildVcsLabel(params *AddBuildVcsLabelParams, opts ...ClientOption) (*AddBuildVcsLabelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildVcsLabelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildVcsLabel",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/vcsLabels",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildVcsLabelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildVcsLabelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBuildVcsLabel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddLogMessageToBuild adds a message to the build log service messages are accepted
*/
func (a *Client) AddLogMessageToBuild(params *AddLogMessageToBuildParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLogMessageToBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addLogMessageToBuild",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddLogMessageToBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  AddProblemToBuild adds a build problem to the matching build
*/
func (a *Client) AddProblemToBuild(params *AddProblemToBuildParams, opts ...ClientOption) (*AddProblemToBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProblemToBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProblemToBuild",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/problemOccurrences",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProblemToBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProblemToBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProblemToBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTagsToBuild adds tags to the matching build
*/
func (a *Client) AddTagsToBuild(params *AddTagsToBuildParams, opts ...ClientOption) (*AddTagsToBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagsToBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTagsToBuild",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTagsToBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTagsToBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTagsToBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTagsToMultipleBuilds adds tags to multiple matching builds
*/
func (a *Client) AddTagsToMultipleBuilds(params *AddTagsToMultipleBuildsParams, opts ...ClientOption) (*AddTagsToMultipleBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagsToMultipleBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTagsToMultipleBuilds",
		Method:             "POST",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTagsToMultipleBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTagsToMultipleBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTagsToMultipleBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBuild deletes build matching the locator
*/
func (a *Client) DeleteBuild(params *DeleteBuildParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuild",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuildComment removes the build comment matching the locator
*/
func (a *Client) DeleteBuildComment(params *DeleteBuildCommentParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildComment",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildCommentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteMultipleBuildComments deletes comments of multiple matching builds
*/
func (a *Client) DeleteMultipleBuildComments(params *DeleteMultipleBuildCommentsParams, opts ...ClientOption) (*DeleteMultipleBuildCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleBuildCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMultipleBuildComments",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMultipleBuildCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMultipleBuildCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMultipleBuildComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMultipleBuilds deletes multiple builds matching the locator
*/
func (a *Client) DeleteMultipleBuilds(params *DeleteMultipleBuildsParams, opts ...ClientOption) (*DeleteMultipleBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMultipleBuilds",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMultipleBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMultipleBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMultipleBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DownloadFileOfBuild downloads specific file
*/
func (a *Client) DownloadFileOfBuild(params *DownloadFileOfBuildParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFileOfBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadFileOfBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifacts/files{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadFileOfBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAggregatedBuildStatus gets the build status of aggregated matching builds
*/
func (a *Client) GetAggregatedBuildStatus(params *GetAggregatedBuildStatusParams, opts ...ClientOption) (*GetAggregatedBuildStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAggregatedBuildStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAggregatedBuildStatus",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/aggregated/{buildLocator}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAggregatedBuildStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAggregatedBuildStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAggregatedBuildStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAggregatedBuildStatusIcon gets the status icon in specified format of aggregated matching builds
*/
func (a *Client) GetAggregatedBuildStatusIcon(params *GetAggregatedBuildStatusIconParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAggregatedBuildStatusIconParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAggregatedBuildStatusIcon",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAggregatedBuildStatusIconReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAllBuilds gets all builds
*/
func (a *Client) GetAllBuilds(params *GetAllBuildsParams, opts ...ClientOption) (*GetAllBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/builds",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactDependencyChanges gets artifact dependency changes of the matching build
*/
func (a *Client) GetArtifactDependencyChanges(params *GetArtifactDependencyChangesParams, opts ...ClientOption) (*GetArtifactDependencyChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDependencyChangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactDependencyChanges",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifactDependencyChanges",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDependencyChangesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactDependencyChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactDependencyChanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactsDirectory gets the artifacts directory of the matching build
*/
func (a *Client) GetArtifactsDirectory(params *GetArtifactsDirectoryParams, opts ...ClientOption) (*GetArtifactsDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactsDirectory",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifactsDirectory",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactsDirectoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactsDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactsDirectory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuild gets build matching the locator
*/
func (a *Client) GetBuild(params *GetBuildParams, opts ...ClientOption) (*GetBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildActualParameters gets actual build parameters of the matching build
*/
func (a *Client) GetBuildActualParameters(params *GetBuildActualParametersParams, opts ...ClientOption) (*GetBuildActualParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildActualParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildActualParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/resulting-properties",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildActualParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildActualParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildActualParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildField gets a field of the matching build
*/
func (a *Client) GetBuildField(params *GetBuildFieldParams, opts ...ClientOption) (*GetBuildFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildField",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildFinishDate gets the finish date of the matching build
*/
func (a *Client) GetBuildFinishDate(params *GetBuildFinishDateParams, opts ...ClientOption) (*GetBuildFinishDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFinishDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildFinishDate",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/finishDate",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFinishDateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFinishDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildFinishDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildNumber gets the number of the matching build
*/
func (a *Client) GetBuildNumber(params *GetBuildNumberParams, opts ...ClientOption) (*GetBuildNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildNumber",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/number",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildPinInfo checks if the matching build is pinned
*/
func (a *Client) GetBuildPinInfo(params *GetBuildPinInfoParams, opts ...ClientOption) (*GetBuildPinInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildPinInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildPinInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/pinInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildPinInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildPinInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildPinInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildProblems gets build problems of the matching build
*/
func (a *Client) GetBuildProblems(params *GetBuildProblemsParams, opts ...ClientOption) (*GetBuildProblemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildProblemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildProblems",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/problemOccurrences",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildProblemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildProblemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildProblems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildRelatedIssues gets related issues of the matching build
*/
func (a *Client) GetBuildRelatedIssues(params *GetBuildRelatedIssuesParams, opts ...ClientOption) (*GetBuildRelatedIssuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildRelatedIssuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildRelatedIssues",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/relatedIssues",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildRelatedIssuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildRelatedIssuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildRelatedIssues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildResolved gets the resolvement status of the matching build
*/
func (a *Client) GetBuildResolved(params *GetBuildResolvedParams, opts ...ClientOption) (*GetBuildResolvedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildResolvedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildResolved",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/resolved/{value}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildResolvedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildResolvedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildResolved: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildResultingProperties updates a build parameter of the matching build
*/
func (a *Client) GetBuildResultingProperties(params *GetBuildResultingPropertiesParams, opts ...ClientOption) (*GetBuildResultingPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildResultingPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildResultingProperties",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildResultingPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildResultingPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildResultingProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildSourceFile gets a source file of the matching build
*/
func (a *Client) GetBuildSourceFile(params *GetBuildSourceFileParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildSourceFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildSourceFile",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/sources/files/{fileName}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildSourceFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetBuildStatisticValue gets a statistical value of the matching build
*/
func (a *Client) GetBuildStatisticValue(params *GetBuildStatisticValueParams, opts ...ClientOption) (*GetBuildStatisticValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStatisticValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildStatisticValue",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statistics/{name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStatisticValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildStatisticValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildStatisticValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildStatisticValues gets all statistical values of the matching build
*/
func (a *Client) GetBuildStatisticValues(params *GetBuildStatisticValuesParams, opts ...ClientOption) (*GetBuildStatisticValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStatisticValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildStatisticValues",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statistics",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStatisticValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildStatisticValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildStatisticValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildStatusIcon gets the status icon in specified format of the matching build
*/
func (a *Client) GetBuildStatusIcon(params *GetBuildStatusIconParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStatusIconParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildStatusIcon",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statusIcon{suffix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStatusIconReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetBuildStatusText gets the build status text of the matching build
*/
func (a *Client) GetBuildStatusText(params *GetBuildStatusTextParams, opts ...ClientOption) (*GetBuildStatusTextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStatusTextParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildStatusText",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/statusText",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStatusTextReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildStatusTextOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildStatusText: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTags gets tags of the matching build
*/
func (a *Client) GetBuildTags(params *GetBuildTagsParams, opts ...ClientOption) (*GetBuildTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildTags",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTestOccurrences gets test occurrences of the matching build
*/
func (a *Client) GetBuildTestOccurrences(params *GetBuildTestOccurrencesParams, opts ...ClientOption) (*GetBuildTestOccurrencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTestOccurrencesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildTestOccurrences",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/testOccurrences",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTestOccurrencesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTestOccurrencesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTestOccurrences: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildVcsLabels gets v c s labels of the matching build
*/
func (a *Client) GetBuildVcsLabels(params *GetBuildVcsLabelsParams, opts ...ClientOption) (*GetBuildVcsLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildVcsLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildVcsLabels",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/vcsLabels",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildVcsLabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildVcsLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildVcsLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCanceledInfo checks if the matching build is canceled
*/
func (a *Client) GetCanceledInfo(params *GetCanceledInfoParams, opts ...ClientOption) (*GetCanceledInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCanceledInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCanceledInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/canceledInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCanceledInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCanceledInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCanceledInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileMetadataOfBuild gets metadata of specific file
*/
func (a *Client) GetFileMetadataOfBuild(params *GetFileMetadataOfBuildParams, opts ...ClientOption) (*GetFileMetadataOfBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileMetadataOfBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileMetadataOfBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifacts/metadata{path}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileMetadataOfBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileMetadataOfBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileMetadataOfBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilesListForSubpathOfBuild lists files under this path
*/
func (a *Client) GetFilesListForSubpathOfBuild(params *GetFilesListForSubpathOfBuildParams, opts ...ClientOption) (*GetFilesListForSubpathOfBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesListForSubpathOfBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesListForSubpathOfBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifacts/{path}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesListForSubpathOfBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesListForSubpathOfBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilesListForSubpathOfBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilesListOfBuild lists all files
*/
func (a *Client) GetFilesListOfBuild(params *GetFilesListOfBuildParams, opts ...ClientOption) (*GetFilesListOfBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesListOfBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesListOfBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifacts",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesListOfBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesListOfBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilesListOfBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMultipleBuilds gets multiple builds matching the locator
*/
func (a *Client) GetMultipleBuilds(params *GetMultipleBuildsParams, opts ...ClientOption) (*GetMultipleBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMultipleBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMultipleBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMultipleBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMultipleBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMultipleBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZippedFileOfBuild gets specific file zipped
*/
func (a *Client) GetZippedFileOfBuild(params *GetZippedFileOfBuildParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZippedFileOfBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getZippedFileOfBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/builds/{buildLocator}/artifacts/archived{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZippedFileOfBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  MarkBuildAsRunning starts the queued build as an agent less build and returns the corresponding running build
*/
func (a *Client) MarkBuildAsRunning(params *MarkBuildAsRunningParams, opts ...ClientOption) (*MarkBuildAsRunningOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkBuildAsRunningParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "markBuildAsRunning",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/runningData",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkBuildAsRunningReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkBuildAsRunningOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for markBuildAsRunning: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PinMultipleBuilds pins multiple matching builds
*/
func (a *Client) PinMultipleBuilds(params *PinMultipleBuildsParams, opts ...ClientOption) (*PinMultipleBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPinMultipleBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pinMultipleBuilds",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/pinInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PinMultipleBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PinMultipleBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pinMultipleBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveMultipleBuildTags removes tags from multiple matching builds
*/
func (a *Client) RemoveMultipleBuildTags(params *RemoveMultipleBuildTagsParams, opts ...ClientOption) (*RemoveMultipleBuildTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveMultipleBuildTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeMultipleBuildTags",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveMultipleBuildTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveMultipleBuildTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeMultipleBuildTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResetBuildFinishProperties removes build parameters from the matching build
*/
func (a *Client) ResetBuildFinishProperties(params *ResetBuildFinishPropertiesParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetBuildFinishPropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "resetBuildFinishProperties",
		Method:             "DELETE",
		PathPattern:        "/app/rest/builds/{buildLocator}/caches/finishProperties",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetBuildFinishPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SetBuildComment updates the comment on the matching build
*/
func (a *Client) SetBuildComment(params *SetBuildCommentParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildCommentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildComment",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildCommentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SetBuildFinishDate marks the running build as finished by passing agent the current time of the build to finish
*/
func (a *Client) SetBuildFinishDate(params *SetBuildFinishDateParams, opts ...ClientOption) (*SetBuildFinishDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildFinishDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildFinishDate",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/finishDate",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildFinishDateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildFinishDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildFinishDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildNumber updates the number of the matching build
*/
func (a *Client) SetBuildNumber(params *SetBuildNumberParams, opts ...ClientOption) (*SetBuildNumberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildNumberParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildNumber",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/number",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildNumberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildNumberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildNumber: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildPinInfo updates the pin info of the matching build
*/
func (a *Client) SetBuildPinInfo(params *SetBuildPinInfoParams, opts ...ClientOption) (*SetBuildPinInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildPinInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildPinInfo",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/pinInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildPinInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildPinInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildPinInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildStatusText updates the build status of the matching build
*/
func (a *Client) SetBuildStatusText(params *SetBuildStatusTextParams, opts ...ClientOption) (*SetBuildStatusTextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildStatusTextParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildStatusText",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/statusText",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildStatusTextReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildStatusTextOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildStatusText: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildTags updates tags of the matching build
*/
func (a *Client) SetBuildTags(params *SetBuildTagsParams, opts ...ClientOption) (*SetBuildTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildTags",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetFinishedTime marks the running build as finished by passing agent the current time of the build to finish
*/
func (a *Client) SetFinishedTime(params *SetFinishedTimeParams, opts ...ClientOption) (*SetFinishedTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetFinishedTimeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setFinishedTime",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/{buildLocator}/finish",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetFinishedTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetFinishedTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setFinishedTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetMultipleBuildComments updates comments in multiple matching builds
*/
func (a *Client) SetMultipleBuildComments(params *SetMultipleBuildCommentsParams, opts ...ClientOption) (*SetMultipleBuildCommentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetMultipleBuildCommentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setMultipleBuildComments",
		Method:             "PUT",
		PathPattern:        "/app/rest/builds/multiple/{buildLocator}/comment",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetMultipleBuildCommentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetMultipleBuildCommentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setMultipleBuildComments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
