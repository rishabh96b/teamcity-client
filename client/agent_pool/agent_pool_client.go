// Code generated by go-swagger; DO NOT EDIT.

package agent_pool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agent pool API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent pool API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAgentToAgentPool(params *AddAgentToAgentPoolParams, opts ...ClientOption) (*AddAgentToAgentPoolOK, error)

	AddProjectToAgentPool(params *AddProjectToAgentPoolParams, opts ...ClientOption) (*AddProjectToAgentPoolOK, error)

	CreateAgentPool(params *CreateAgentPoolParams, opts ...ClientOption) (*CreateAgentPoolOK, error)

	DeleteAgentPool(params *DeleteAgentPoolParams, opts ...ClientOption) error

	DeleteAllProjectsFromAgentPool(params *DeleteAllProjectsFromAgentPoolParams, opts ...ClientOption) error

	DeleteProjectFromAgentPool(params *DeleteProjectFromAgentPoolParams, opts ...ClientOption) error

	GetAgentPoolOfAgentPool(params *GetAgentPoolOfAgentPoolParams, opts ...ClientOption) (*GetAgentPoolOfAgentPoolOK, error)

	GetAllAgentPools(params *GetAllAgentPoolsParams, opts ...ClientOption) (*GetAllAgentPoolsOK, error)

	GetAllAgentsFromAgentPool(params *GetAllAgentsFromAgentPoolParams, opts ...ClientOption) (*GetAllAgentsFromAgentPoolOK, error)

	GetAllProjectsFromAgentPool(params *GetAllProjectsFromAgentPoolParams, opts ...ClientOption) (*GetAllProjectsFromAgentPoolOK, error)

	GetFieldFromAgentPool(params *GetFieldFromAgentPoolParams, opts ...ClientOption) (*GetFieldFromAgentPoolOK, error)

	SetAgentPoolField(params *SetAgentPoolFieldParams, opts ...ClientOption) (*SetAgentPoolFieldOK, error)

	SetAgentPoolProjects(params *SetAgentPoolProjectsParams, opts ...ClientOption) (*SetAgentPoolProjectsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAgentToAgentPool assigns the agent to the matching agent pool
*/
func (a *Client) AddAgentToAgentPool(params *AddAgentToAgentPoolParams, opts ...ClientOption) (*AddAgentToAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAgentToAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAgentToAgentPool",
		Method:             "POST",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/agents",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAgentToAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAgentToAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAgentToAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddProjectToAgentPool assigns the project to the matching agent pool
*/
func (a *Client) AddProjectToAgentPool(params *AddProjectToAgentPoolParams, opts ...ClientOption) (*AddProjectToAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectToAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProjectToAgentPool",
		Method:             "POST",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProjectToAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProjectToAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProjectToAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateAgentPool creates a new agent pool
*/
func (a *Client) CreateAgentPool(params *CreateAgentPoolParams, opts ...ClientOption) (*CreateAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAgentPool",
		Method:             "POST",
		PathPattern:        "/app/rest/agentPools",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAgentPool deletes the agent pool matching the locator
*/
func (a *Client) DeleteAgentPool(params *DeleteAgentPoolParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAgentPool",
		Method:             "DELETE",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteAllProjectsFromAgentPool unassigns all projects from the matching agent pool
*/
func (a *Client) DeleteAllProjectsFromAgentPool(params *DeleteAllProjectsFromAgentPoolParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllProjectsFromAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllProjectsFromAgentPool",
		Method:             "DELETE",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllProjectsFromAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteProjectFromAgentPool unassigns the project from the matching agent pool
*/
func (a *Client) DeleteProjectFromAgentPool(params *DeleteProjectFromAgentPoolParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectFromAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProjectFromAgentPool",
		Method:             "DELETE",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/projects/{projectLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectFromAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAgentPoolOfAgentPool gets the agent pool matching the locator
*/
func (a *Client) GetAgentPoolOfAgentPool(params *GetAgentPoolOfAgentPoolParams, opts ...ClientOption) (*GetAgentPoolOfAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentPoolOfAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentPoolOfAgentPool",
		Method:             "GET",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentPoolOfAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentPoolOfAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentPoolOfAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllAgentPools gets all agent pools
*/
func (a *Client) GetAllAgentPools(params *GetAllAgentPoolsParams, opts ...ClientOption) (*GetAllAgentPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAgentPoolsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAgentPools",
		Method:             "GET",
		PathPattern:        "/app/rest/agentPools",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAgentPoolsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAgentPoolsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAgentPools: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllAgentsFromAgentPool gets the agent of the matching agent pool
*/
func (a *Client) GetAllAgentsFromAgentPool(params *GetAllAgentsFromAgentPoolParams, opts ...ClientOption) (*GetAllAgentsFromAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAgentsFromAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAgentsFromAgentPool",
		Method:             "GET",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/agents",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAgentsFromAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAgentsFromAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAgentsFromAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllProjectsFromAgentPool gets all projects of the matching agent pool
*/
func (a *Client) GetAllProjectsFromAgentPool(params *GetAllProjectsFromAgentPoolParams, opts ...ClientOption) (*GetAllProjectsFromAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProjectsFromAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllProjectsFromAgentPool",
		Method:             "GET",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllProjectsFromAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProjectsFromAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProjectsFromAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFieldFromAgentPool gets a field of the matching agent pool
*/
func (a *Client) GetFieldFromAgentPool(params *GetFieldFromAgentPoolParams, opts ...ClientOption) (*GetFieldFromAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFieldFromAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFieldFromAgentPool",
		Method:             "GET",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFieldFromAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFieldFromAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFieldFromAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAgentPoolField updates a field of the matching agent pool
*/
func (a *Client) SetAgentPoolField(params *SetAgentPoolFieldParams, opts ...ClientOption) (*SetAgentPoolFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentPoolFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAgentPoolField",
		Method:             "PUT",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentPoolFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentPoolFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentPoolField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAgentPoolProjects updates projects of the matching agent pool
*/
func (a *Client) SetAgentPoolProjects(params *SetAgentPoolProjectsParams, opts ...ClientOption) (*SetAgentPoolProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentPoolProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAgentPoolProjects",
		Method:             "PUT",
		PathPattern:        "/app/rest/agentPools/{agentPoolLocator}/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentPoolProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentPoolProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentPoolProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
