// Code generated by go-swagger; DO NOT EDIT.

package change

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new change API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for change API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllChanges(params *GetAllChangesParams, opts ...ClientOption) (*GetAllChangesOK, error)

	GetChange(params *GetChangeParams, opts ...ClientOption) (*GetChangeOK, error)

	GetChangeAttributes(params *GetChangeAttributesParams, opts ...ClientOption) (*GetChangeAttributesOK, error)

	GetChangeDuplicates(params *GetChangeDuplicatesParams, opts ...ClientOption) (*GetChangeDuplicatesOK, error)

	GetChangeField(params *GetChangeFieldParams, opts ...ClientOption) (*GetChangeFieldOK, error)

	GetChangeFirstBuilds(params *GetChangeFirstBuildsParams, opts ...ClientOption) (*GetChangeFirstBuildsOK, error)

	GetChangeIssue(params *GetChangeIssueParams, opts ...ClientOption) (*GetChangeIssueOK, error)

	GetChangeParentChanges(params *GetChangeParentChangesParams, opts ...ClientOption) (*GetChangeParentChangesOK, error)

	GetChangeParentRevisions(params *GetChangeParentRevisionsParams, opts ...ClientOption) (*GetChangeParentRevisionsOK, error)

	GetChangeRelatedBuildTypes(params *GetChangeRelatedBuildTypesParams, opts ...ClientOption) (*GetChangeRelatedBuildTypesOK, error)

	GetChangeVcsRoot(params *GetChangeVcsRootParams, opts ...ClientOption) (*GetChangeVcsRootOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAllChanges gets all changes
*/
func (a *Client) GetAllChanges(params *GetAllChangesParams, opts ...ClientOption) (*GetAllChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllChanges",
		Method:             "GET",
		PathPattern:        "/app/rest/changes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllChangesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllChanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChange gets change matching the locator
*/
func (a *Client) GetChange(params *GetChangeParams, opts ...ClientOption) (*GetChangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChange",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeAttributes gets attributes of the matching change
*/
func (a *Client) GetChangeAttributes(params *GetChangeAttributesParams, opts ...ClientOption) (*GetChangeAttributesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeAttributesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeAttributes",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/attributes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeAttributesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeAttributesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeAttributes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeDuplicates gets duplicates of the matching change
*/
func (a *Client) GetChangeDuplicates(params *GetChangeDuplicatesParams, opts ...ClientOption) (*GetChangeDuplicatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeDuplicatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeDuplicates",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/duplicates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeDuplicatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeDuplicatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeDuplicates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeField gets a field of the matching change
*/
func (a *Client) GetChangeField(params *GetChangeFieldParams, opts ...ClientOption) (*GetChangeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeField",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeFirstBuilds gets first builds of the matching change
*/
func (a *Client) GetChangeFirstBuilds(params *GetChangeFirstBuildsParams, opts ...ClientOption) (*GetChangeFirstBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeFirstBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeFirstBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/firstBuilds",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeFirstBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeFirstBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeFirstBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeIssue gets issues of the matching change
*/
func (a *Client) GetChangeIssue(params *GetChangeIssueParams, opts ...ClientOption) (*GetChangeIssueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeIssueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeIssue",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/issues",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeIssueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeIssueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeIssue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeParentChanges gets parent changes of the matching change
*/
func (a *Client) GetChangeParentChanges(params *GetChangeParentChangesParams, opts ...ClientOption) (*GetChangeParentChangesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeParentChangesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeParentChanges",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/parentChanges",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeParentChangesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeParentChangesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeParentChanges: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeParentRevisions gets parent revisions of the matching change
*/
func (a *Client) GetChangeParentRevisions(params *GetChangeParentRevisionsParams, opts ...ClientOption) (*GetChangeParentRevisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeParentRevisionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeParentRevisions",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/parentRevisions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeParentRevisionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeParentRevisionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeParentRevisions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeRelatedBuildTypes gets build configurations related to the matching change
*/
func (a *Client) GetChangeRelatedBuildTypes(params *GetChangeRelatedBuildTypesParams, opts ...ClientOption) (*GetChangeRelatedBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeRelatedBuildTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeRelatedBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeRelatedBuildTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeRelatedBuildTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeRelatedBuildTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChangeVcsRoot gets a v c s root instance of the matching change
*/
func (a *Client) GetChangeVcsRoot(params *GetChangeVcsRootParams, opts ...ClientOption) (*GetChangeVcsRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChangeVcsRootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChangeVcsRoot",
		Method:             "GET",
		PathPattern:        "/app/rest/changes/{changeLocator}/vcsRootInstance",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChangeVcsRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChangeVcsRootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChangeVcsRoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
