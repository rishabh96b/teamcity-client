// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agent API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agent API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAgent(params *DeleteAgentParams, opts ...ClientOption) error

	GetAgent(params *GetAgentParams, opts ...ClientOption) (*GetAgentOK, error)

	GetAgentField(params *GetAgentFieldParams, opts ...ClientOption) (*GetAgentFieldOK, error)

	GetAgentPool(params *GetAgentPoolParams, opts ...ClientOption) (*GetAgentPoolOK, error)

	GetAllAgents(params *GetAllAgentsParams, opts ...ClientOption) (*GetAllAgentsOK, error)

	GetAuthorizedInfo(params *GetAuthorizedInfoParams, opts ...ClientOption) (*GetAuthorizedInfoOK, error)

	GetBuildConfigurationRunPolicy(params *GetBuildConfigurationRunPolicyParams, opts ...ClientOption) (*GetBuildConfigurationRunPolicyOK, error)

	GetCompatibleBuildTypes(params *GetCompatibleBuildTypesParams, opts ...ClientOption) (*GetCompatibleBuildTypesOK, error)

	GetEnabledInfo(params *GetEnabledInfoParams, opts ...ClientOption) (*GetEnabledInfoOK, error)

	GetIncompatibleBuildTypes(params *GetIncompatibleBuildTypesParams, opts ...ClientOption) (*GetIncompatibleBuildTypesOK, error)

	SetAgentField(params *SetAgentFieldParams, opts ...ClientOption) (*SetAgentFieldOK, error)

	SetAgentPool(params *SetAgentPoolParams, opts ...ClientOption) (*SetAgentPoolOK, error)

	SetAuthorizedInfo(params *SetAuthorizedInfoParams, opts ...ClientOption) (*SetAuthorizedInfoOK, error)

	SetBuildConfigurationRunPolicy(params *SetBuildConfigurationRunPolicyParams, opts ...ClientOption) (*SetBuildConfigurationRunPolicyOK, error)

	SetEnabledInfo(params *SetEnabledInfoParams, opts ...ClientOption) (*SetEnabledInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteAgent deletes an inactive agent
*/
func (a *Client) DeleteAgent(params *DeleteAgentParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAgent",
		Method:             "DELETE",
		PathPattern:        "/app/rest/agents/{agentLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAgent gets agent matching the locator
*/
func (a *Client) GetAgent(params *GetAgentParams, opts ...ClientOption) (*GetAgentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgent",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAgentField gets a field of the matching agent
*/
func (a *Client) GetAgentField(params *GetAgentFieldParams, opts ...ClientOption) (*GetAgentFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentField",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAgentPool gets the agent pool of the matching agent
*/
func (a *Client) GetAgentPool(params *GetAgentPoolParams, opts ...ClientOption) (*GetAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentPool",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/pool",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllAgents gets all known agents
*/
func (a *Client) GetAllAgents(params *GetAllAgentsParams, opts ...ClientOption) (*GetAllAgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAgentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAgents",
		Method:             "GET",
		PathPattern:        "/app/rest/agents",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAgentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAgents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAuthorizedInfo gets the authorization info of the matching agent
*/
func (a *Client) GetAuthorizedInfo(params *GetAuthorizedInfoParams, opts ...ClientOption) (*GetAuthorizedInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthorizedInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuthorizedInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/authorizedInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthorizedInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuthorizedInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuthorizedInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildConfigurationRunPolicy gets the build configuration run policy of the matching agent
*/
func (a *Client) GetBuildConfigurationRunPolicy(params *GetBuildConfigurationRunPolicyParams, opts ...ClientOption) (*GetBuildConfigurationRunPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildConfigurationRunPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildConfigurationRunPolicy",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/compatibilityPolicy",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildConfigurationRunPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildConfigurationRunPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildConfigurationRunPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompatibleBuildTypes gets build types compatible with the matching agent
*/
func (a *Client) GetCompatibleBuildTypes(params *GetCompatibleBuildTypesParams, opts ...ClientOption) (*GetCompatibleBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibleBuildTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCompatibleBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/compatibleBuildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibleBuildTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatibleBuildTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatibleBuildTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEnabledInfo checks if the matching agent is enabled
*/
func (a *Client) GetEnabledInfo(params *GetEnabledInfoParams, opts ...ClientOption) (*GetEnabledInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnabledInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEnabledInfo",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/enabledInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEnabledInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnabledInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnabledInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIncompatibleBuildTypes gets build types incompatible with the matching agent
*/
func (a *Client) GetIncompatibleBuildTypes(params *GetIncompatibleBuildTypesParams, opts ...ClientOption) (*GetIncompatibleBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncompatibleBuildTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIncompatibleBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/agents/{agentLocator}/incompatibleBuildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncompatibleBuildTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIncompatibleBuildTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIncompatibleBuildTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAgentField updates a field of the matching agent
*/
func (a *Client) SetAgentField(params *SetAgentFieldParams, opts ...ClientOption) (*SetAgentFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAgentField",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAgentPool assigns the matching agent to the specified agent pool
*/
func (a *Client) SetAgentPool(params *SetAgentPoolParams, opts ...ClientOption) (*SetAgentPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAgentPool",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/pool",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentPoolOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentPool: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAuthorizedInfo updates the authorization info of the matching agent
*/
func (a *Client) SetAuthorizedInfo(params *SetAuthorizedInfoParams, opts ...ClientOption) (*SetAuthorizedInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAuthorizedInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAuthorizedInfo",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/authorizedInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAuthorizedInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAuthorizedInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAuthorizedInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildConfigurationRunPolicy updates build configuration run policy of agent matching locator
*/
func (a *Client) SetBuildConfigurationRunPolicy(params *SetBuildConfigurationRunPolicyParams, opts ...ClientOption) (*SetBuildConfigurationRunPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildConfigurationRunPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildConfigurationRunPolicy",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/compatibilityPolicy",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildConfigurationRunPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildConfigurationRunPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildConfigurationRunPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetEnabledInfo updates the enablement status of the matching agent
*/
func (a *Client) SetEnabledInfo(params *SetEnabledInfoParams, opts ...ClientOption) (*SetEnabledInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEnabledInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setEnabledInfo",
		Method:             "PUT",
		PathPattern:        "/app/rest/agents/{agentLocator}/enabledInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEnabledInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEnabledInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setEnabledInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
