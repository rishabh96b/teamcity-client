// Code generated by go-swagger; DO NOT EDIT.

package vcs_root_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new vcs root instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for vcs root instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteVcsRootInstanceField(params *DeleteVcsRootInstanceFieldParams, opts ...ClientOption) error

	DeleteVcsRootInstanceRepositoryState(params *DeleteVcsRootInstanceRepositoryStateParams, opts ...ClientOption) error

	DownloadFile(params *DownloadFileParams, opts ...ClientOption) error

	GetAllVcsRootInstances(params *GetAllVcsRootInstancesParams, opts ...ClientOption) (*GetAllVcsRootInstancesOK, error)

	GetFileMetadata(params *GetFileMetadataParams, opts ...ClientOption) (*GetFileMetadataOK, error)

	GetFilesList(params *GetFilesListParams, opts ...ClientOption) (*GetFilesListOK, error)

	GetFilesListForSubpath(params *GetFilesListForSubpathParams, opts ...ClientOption) (*GetFilesListForSubpathOK, error)

	GetVcsRootInstance(params *GetVcsRootInstanceParams, opts ...ClientOption) (*GetVcsRootInstanceOK, error)

	GetVcsRootInstanceCreationDate(params *GetVcsRootInstanceCreationDateParams, opts ...ClientOption) (*GetVcsRootInstanceCreationDateOK, error)

	GetVcsRootInstanceField(params *GetVcsRootInstanceFieldParams, opts ...ClientOption) (*GetVcsRootInstanceFieldOK, error)

	GetVcsRootInstanceProperties(params *GetVcsRootInstancePropertiesParams, opts ...ClientOption) (*GetVcsRootInstancePropertiesOK, error)

	GetVcsRootInstanceRepositoryState(params *GetVcsRootInstanceRepositoryStateParams, opts ...ClientOption) (*GetVcsRootInstanceRepositoryStateOK, error)

	GetZippedFile(params *GetZippedFileParams, opts ...ClientOption) error

	RequestPendingChangesCheck(params *RequestPendingChangesCheckParams, opts ...ClientOption) (*RequestPendingChangesCheckOK, error)

	SetVcsRootInstanceField(params *SetVcsRootInstanceFieldParams, opts ...ClientOption) (*SetVcsRootInstanceFieldOK, error)

	SetVcsRootInstanceRepositoryState(params *SetVcsRootInstanceRepositoryStateParams, opts ...ClientOption) (*SetVcsRootInstanceRepositoryStateOK, error)

	TriggerCommitHookNotification(params *TriggerCommitHookNotificationParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteVcsRootInstanceField removes a field of the matching v c s root instance
*/
func (a *Client) DeleteVcsRootInstanceField(params *DeleteVcsRootInstanceFieldParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsRootInstanceFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVcsRootInstanceField",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcsRootInstanceFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteVcsRootInstanceRepositoryState deletes the last repository state of the matching v c s root instance
*/
func (a *Client) DeleteVcsRootInstanceRepositoryState(params *DeleteVcsRootInstanceRepositoryStateParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsRootInstanceRepositoryStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVcsRootInstanceRepositoryState",
		Method:             "DELETE",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcsRootInstanceRepositoryStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DownloadFile downloads specific file
*/
func (a *Client) DownloadFile(params *DownloadFileParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadFile",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/files{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAllVcsRootInstances gets all v c s root instances
*/
func (a *Client) GetAllVcsRootInstances(params *GetAllVcsRootInstancesParams, opts ...ClientOption) (*GetAllVcsRootInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVcsRootInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVcsRootInstances",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllVcsRootInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVcsRootInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVcsRootInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileMetadata gets metadata of specific file
*/
func (a *Client) GetFileMetadata(params *GetFileMetadataParams, opts ...ClientOption) (*GetFileMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileMetadata",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/metadata{path}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileMetadataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilesList lists all files
*/
func (a *Client) GetFilesList(params *GetFilesListParams, opts ...ClientOption) (*GetFilesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesList",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilesList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilesListForSubpath lists files under this path
*/
func (a *Client) GetFilesListForSubpath(params *GetFilesListForSubpathParams, opts ...ClientOption) (*GetFilesListForSubpathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesListForSubpathParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesListForSubpath",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/{path}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesListForSubpathReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesListForSubpathOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilesListForSubpath: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootInstance gets v c s root instance matching the locator
*/
func (a *Client) GetVcsRootInstance(params *GetVcsRootInstanceParams, opts ...ClientOption) (*GetVcsRootInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootInstance",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootInstanceCreationDate gets the creation date of the matching v c s root instance
*/
func (a *Client) GetVcsRootInstanceCreationDate(params *GetVcsRootInstanceCreationDateParams, opts ...ClientOption) (*GetVcsRootInstanceCreationDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootInstanceCreationDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootInstanceCreationDate",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState/creationDate",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootInstanceCreationDateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootInstanceCreationDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootInstanceCreationDate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootInstanceField gets a field of the matching v c s root instance
*/
func (a *Client) GetVcsRootInstanceField(params *GetVcsRootInstanceFieldParams, opts ...ClientOption) (*GetVcsRootInstanceFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootInstanceFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootInstanceField",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootInstanceFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootInstanceFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootInstanceField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootInstanceProperties gets all properties of the matching v c s root instance
*/
func (a *Client) GetVcsRootInstanceProperties(params *GetVcsRootInstancePropertiesParams, opts ...ClientOption) (*GetVcsRootInstancePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootInstancePropertiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootInstanceProperties",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/properties",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootInstancePropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootInstancePropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootInstanceProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootInstanceRepositoryState gets the repository state of the matching v c s root instance
*/
func (a *Client) GetVcsRootInstanceRepositoryState(params *GetVcsRootInstanceRepositoryStateParams, opts ...ClientOption) (*GetVcsRootInstanceRepositoryStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootInstanceRepositoryStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootInstanceRepositoryState",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootInstanceRepositoryStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootInstanceRepositoryStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootInstanceRepositoryState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZippedFile gets specific file zipped
*/
func (a *Client) GetZippedFile(params *GetZippedFileParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZippedFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getZippedFile",
		Method:             "GET",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/files/latest/archived{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZippedFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  RequestPendingChangesCheck checks for the pending changes for all v c s root instances
*/
func (a *Client) RequestPendingChangesCheck(params *RequestPendingChangesCheckParams, opts ...ClientOption) (*RequestPendingChangesCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestPendingChangesCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestPendingChangesCheck",
		Method:             "POST",
		PathPattern:        "/app/rest/vcs-root-instances/checkingForChangesQueue",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestPendingChangesCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestPendingChangesCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestPendingChangesCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetVcsRootInstanceField gets a field of the matching v c s root instance
*/
func (a *Client) SetVcsRootInstanceField(params *SetVcsRootInstanceFieldParams, opts ...ClientOption) (*SetVcsRootInstanceFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetVcsRootInstanceFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setVcsRootInstanceField",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVcsRootInstanceFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetVcsRootInstanceFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setVcsRootInstanceField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetVcsRootInstanceRepositoryState updates the repository state of the matching v c s root instance
*/
func (a *Client) SetVcsRootInstanceRepositoryState(params *SetVcsRootInstanceRepositoryStateParams, opts ...ClientOption) (*SetVcsRootInstanceRepositoryStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetVcsRootInstanceRepositoryStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setVcsRootInstanceRepositoryState",
		Method:             "PUT",
		PathPattern:        "/app/rest/vcs-root-instances/{vcsRootInstanceLocator}/repositoryState",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetVcsRootInstanceRepositoryStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetVcsRootInstanceRepositoryStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setVcsRootInstanceRepositoryState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TriggerCommitHookNotification sends the commit hook notification
*/
func (a *Client) TriggerCommitHookNotification(params *TriggerCommitHookNotificationParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerCommitHookNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerCommitHookNotification",
		Method:             "POST",
		PathPattern:        "/app/rest/vcs-root-instances/commitHookNotification",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriggerCommitHookNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
