// Code generated by go-swagger; DO NOT EDIT.

package cloud_instance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cloud instance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud instance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllCloudImages(params *GetAllCloudImagesParams, opts ...ClientOption) (*GetAllCloudImagesOK, error)

	GetAllCloudInstances(params *GetAllCloudInstancesParams, opts ...ClientOption) (*GetAllCloudInstancesOK, error)

	GetAllCloudProfiles(params *GetAllCloudProfilesParams, opts ...ClientOption) (*GetAllCloudProfilesOK, error)

	GetCloudImage(params *GetCloudImageParams, opts ...ClientOption) (*GetCloudImageOK, error)

	GetCloudInstance(params *GetCloudInstanceParams, opts ...ClientOption) (*GetCloudInstanceOK, error)

	GetCloudProfile(params *GetCloudProfileParams, opts ...ClientOption) (*GetCloudProfileOK, error)

	StartInstance(params *StartInstanceParams, opts ...ClientOption) error

	StopInstance(params *StopInstanceParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAllCloudImages gets all cloud images
*/
func (a *Client) GetAllCloudImages(params *GetAllCloudImagesParams, opts ...ClientOption) (*GetAllCloudImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCloudImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllCloudImages",
		Method:             "GET",
		PathPattern:        "/app/rest/cloud/images",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllCloudImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllCloudImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllCloudImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllCloudInstances gets all cloud instances
*/
func (a *Client) GetAllCloudInstances(params *GetAllCloudInstancesParams, opts ...ClientOption) (*GetAllCloudInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCloudInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllCloudInstances",
		Method:             "GET",
		PathPattern:        "/app/rest/cloud/instances",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllCloudInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllCloudInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllCloudInstances: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllCloudProfiles gets all cloud profiles
*/
func (a *Client) GetAllCloudProfiles(params *GetAllCloudProfilesParams, opts ...ClientOption) (*GetAllCloudProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCloudProfilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllCloudProfiles",
		Method:             "GET",
		PathPattern:        "/app/rest/cloud/profiles",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllCloudProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllCloudProfilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllCloudProfiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudImage gets cloud image matching the locator
*/
func (a *Client) GetCloudImage(params *GetCloudImageParams, opts ...ClientOption) (*GetCloudImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudImage",
		Method:             "GET",
		PathPattern:        "/app/rest/cloud/images/{imageLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudImageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCloudImage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudInstance gets cloud instance matching the locator
*/
func (a *Client) GetCloudInstance(params *GetCloudInstanceParams, opts ...ClientOption) (*GetCloudInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudInstance",
		Method:             "GET",
		PathPattern:        "/app/rest/cloud/instances/{instanceLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCloudInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCloudProfile gets cloud profile matching the locator
*/
func (a *Client) GetCloudProfile(params *GetCloudProfileParams, opts ...ClientOption) (*GetCloudProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudProfileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudProfile",
		Method:             "GET",
		PathPattern:        "/app/rest/cloud/profiles/{profileLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCloudProfile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartInstance starts a new cloud instance
*/
func (a *Client) StartInstance(params *StartInstanceParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startInstance",
		Method:             "POST",
		PathPattern:        "/app/rest/cloud/instances",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StartInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  StopInstance stops cloud instance matching the locator
*/
func (a *Client) StopInstance(params *StopInstanceParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopInstanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stopInstance",
		Method:             "DELETE",
		PathPattern:        "/app/rest/cloud/instances/{instanceLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
