// Code generated by go-swagger; DO NOT EDIT.

package build_queue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new build queue API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build queue API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddBuildToQueue(params *AddBuildToQueueParams, opts ...ClientOption) (*AddBuildToQueueOK, error)

	AddTagsToBuildOfBuildQueue(params *AddTagsToBuildOfBuildQueueParams, opts ...ClientOption) error

	CancelQueuedBuild(params *CancelQueuedBuildParams, opts ...ClientOption) (*CancelQueuedBuildOK, error)

	DeleteAllQueuedBuilds(params *DeleteAllQueuedBuildsParams, opts ...ClientOption) error

	DeleteQueuedBuild(params *DeleteQueuedBuildParams, opts ...ClientOption) error

	GetAllQueuedBuilds(params *GetAllQueuedBuildsParams, opts ...ClientOption) (*GetAllQueuedBuildsOK, error)

	GetCompatibleAgentsForBuild(params *GetCompatibleAgentsForBuildParams, opts ...ClientOption) (*GetCompatibleAgentsForBuildOK, error)

	GetQueuedBuild(params *GetQueuedBuildParams, opts ...ClientOption) (*GetQueuedBuildOK, error)

	GetQueuedBuildPosition(params *GetQueuedBuildPositionParams, opts ...ClientOption) (*GetQueuedBuildPositionOK, error)

	GetQueuedBuildTags(params *GetQueuedBuildTagsParams, opts ...ClientOption) (*GetQueuedBuildTagsOK, error)

	SetQueuedBuildPosition(params *SetQueuedBuildPositionParams, opts ...ClientOption) (*SetQueuedBuildPositionOK, error)

	SetQueuedBuildsOrder(params *SetQueuedBuildsOrderParams, opts ...ClientOption) (*SetQueuedBuildsOrderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddBuildToQueue adds a new build to the queue
*/
func (a *Client) AddBuildToQueue(params *AddBuildToQueueParams, opts ...ClientOption) (*AddBuildToQueueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildToQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildToQueue",
		Method:             "POST",
		PathPattern:        "/app/rest/buildQueue",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildToQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildToQueueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBuildToQueue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTagsToBuildOfBuildQueue adds tags to the matching build
*/
func (a *Client) AddTagsToBuildOfBuildQueue(params *AddTagsToBuildOfBuildQueueParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagsToBuildOfBuildQueueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTagsToBuildOfBuildQueue",
		Method:             "POST",
		PathPattern:        "/app/rest/buildQueue/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTagsToBuildOfBuildQueueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  CancelQueuedBuild cancels a queued matching build
*/
func (a *Client) CancelQueuedBuild(params *CancelQueuedBuildParams, opts ...ClientOption) (*CancelQueuedBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelQueuedBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelQueuedBuild",
		Method:             "POST",
		PathPattern:        "/app/rest/buildQueue/{queuedBuildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelQueuedBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelQueuedBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelQueuedBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAllQueuedBuilds deletes all queued builds
*/
func (a *Client) DeleteAllQueuedBuilds(params *DeleteAllQueuedBuildsParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllQueuedBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllQueuedBuilds",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildQueue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllQueuedBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteQueuedBuild deletes a queued matching build
*/
func (a *Client) DeleteQueuedBuild(params *DeleteQueuedBuildParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQueuedBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteQueuedBuild",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildQueue/{queuedBuildLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQueuedBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAllQueuedBuilds gets all queued builds
*/
func (a *Client) GetAllQueuedBuilds(params *GetAllQueuedBuildsParams, opts ...ClientOption) (*GetAllQueuedBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllQueuedBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllQueuedBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllQueuedBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllQueuedBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllQueuedBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCompatibleAgentsForBuild gets compatible agents for a queued matching build
*/
func (a *Client) GetCompatibleAgentsForBuild(params *GetCompatibleAgentsForBuildParams, opts ...ClientOption) (*GetCompatibleAgentsForBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibleAgentsForBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCompatibleAgentsForBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue/{queuedBuildLocator}/compatibleAgents",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibleAgentsForBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCompatibleAgentsForBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCompatibleAgentsForBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetQueuedBuild gets a queued matching build
*/
func (a *Client) GetQueuedBuild(params *GetQueuedBuildParams, opts ...ClientOption) (*GetQueuedBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueuedBuildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getQueuedBuild",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue/{queuedBuildLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQueuedBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueuedBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getQueuedBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetQueuedBuildPosition gets the queue position of a queued matching build
*/
func (a *Client) GetQueuedBuildPosition(params *GetQueuedBuildPositionParams, opts ...ClientOption) (*GetQueuedBuildPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueuedBuildPositionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getQueuedBuildPosition",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue/order/{queuePosition}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQueuedBuildPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueuedBuildPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getQueuedBuildPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetQueuedBuildTags gets tags of the queued matching build
*/
func (a *Client) GetQueuedBuildTags(params *GetQueuedBuildTagsParams, opts ...ClientOption) (*GetQueuedBuildTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueuedBuildTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getQueuedBuildTags",
		Method:             "GET",
		PathPattern:        "/app/rest/buildQueue/{buildLocator}/tags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQueuedBuildTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueuedBuildTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getQueuedBuildTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetQueuedBuildPosition updates the queue position of a queued matching build
*/
func (a *Client) SetQueuedBuildPosition(params *SetQueuedBuildPositionParams, opts ...ClientOption) (*SetQueuedBuildPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetQueuedBuildPositionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setQueuedBuildPosition",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildQueue/order/{queuePosition}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetQueuedBuildPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetQueuedBuildPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setQueuedBuildPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetQueuedBuildsOrder updates the build queue order
*/
func (a *Client) SetQueuedBuildsOrder(params *SetQueuedBuildsOrderParams, opts ...ClientOption) (*SetQueuedBuildsOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetQueuedBuildsOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setQueuedBuildsOrder",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildQueue/order",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetQueuedBuildsOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetQueuedBuildsOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setQueuedBuildsOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
