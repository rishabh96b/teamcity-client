// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAgentPoolsProject(params *AddAgentPoolsProjectParams, opts ...ClientOption) (*AddAgentPoolsProjectOK, error)

	AddBuildType(params *AddBuildTypeParams, opts ...ClientOption) (*AddBuildTypeOK, error)

	AddFeature(params *AddFeatureParams, opts ...ClientOption) (*AddFeatureOK, error)

	AddProject(params *AddProjectParams, opts ...ClientOption) (*AddProjectOK, error)

	AddSecureToken(params *AddSecureTokenParams, opts ...ClientOption) (*AddSecureTokenOK, error)

	AddTemplate(params *AddTemplateParams, opts ...ClientOption) (*AddTemplateOK, error)

	CreateBuildParameter(params *CreateBuildParameterParams, opts ...ClientOption) (*CreateBuildParameterOK, error)

	DeleteBuildParameter(params *DeleteBuildParameterParams, opts ...ClientOption) error

	DeleteBuildParameters(params *DeleteBuildParametersParams, opts ...ClientOption) error

	DeleteFeature(params *DeleteFeatureParams, opts ...ClientOption) error

	DeleteProject(params *DeleteProjectParams, opts ...ClientOption) error

	GetAgentPoolsProject(params *GetAgentPoolsProjectParams, opts ...ClientOption) (*GetAgentPoolsProjectOK, error)

	GetAllBranches(params *GetAllBranchesParams, opts ...ClientOption) (*GetAllBranchesOK, error)

	GetAllProjects(params *GetAllProjectsParams, opts ...ClientOption) (*GetAllProjectsOK, error)

	GetAllSubprojectsOrdered(params *GetAllSubprojectsOrderedParams, opts ...ClientOption) (*GetAllSubprojectsOrderedOK, error)

	GetBuildParameter(params *GetBuildParameterParams, opts ...ClientOption) (*GetBuildParameterOK, error)

	GetBuildParameterSpecification(params *GetBuildParameterSpecificationParams, opts ...ClientOption) (*GetBuildParameterSpecificationOK, error)

	GetBuildParameterType(params *GetBuildParameterTypeParams, opts ...ClientOption) (*GetBuildParameterTypeOK, error)

	GetBuildParameterValue(params *GetBuildParameterValueParams, opts ...ClientOption) (*GetBuildParameterValueOK, error)

	GetBuildParameters(params *GetBuildParametersParams, opts ...ClientOption) (*GetBuildParametersOK, error)

	GetDefaultTemplate(params *GetDefaultTemplateParams, opts ...ClientOption) (*GetDefaultTemplateOK, error)

	GetFeature(params *GetFeatureParams, opts ...ClientOption) (*GetFeatureOK, error)

	GetFeatures(params *GetFeaturesParams, opts ...ClientOption) (*GetFeaturesOK, error)

	GetProject(params *GetProjectParams, opts ...ClientOption) (*GetProjectOK, error)

	GetProjectField(params *GetProjectFieldParams, opts ...ClientOption) (*GetProjectFieldOK, error)

	GetProjectParentProject(params *GetProjectParentProjectParams, opts ...ClientOption) (*GetProjectParentProjectOK, error)

	GetProjectSettingsFile(params *GetProjectSettingsFileParams, opts ...ClientOption) (*GetProjectSettingsFileOK, error)

	GetProjectTemplates(params *GetProjectTemplatesParams, opts ...ClientOption) (*GetProjectTemplatesOK, error)

	GetSecureValue(params *GetSecureValueParams, opts ...ClientOption) (*GetSecureValueOK, error)

	RemoveDefaultTemplate(params *RemoveDefaultTemplateParams, opts ...ClientOption) error

	RemoveProjectFromAgentPool(params *RemoveProjectFromAgentPoolParams, opts ...ClientOption) error

	SetAgentPoolsProject(params *SetAgentPoolsProjectParams, opts ...ClientOption) (*SetAgentPoolsProjectOK, error)

	SetBuildTypesOrder(params *SetBuildTypesOrderParams, opts ...ClientOption) (*SetBuildTypesOrderOK, error)

	SetDefaultTemplate(params *SetDefaultTemplateParams, opts ...ClientOption) (*SetDefaultTemplateOK, error)

	SetParentProject(params *SetParentProjectParams, opts ...ClientOption) (*SetParentProjectOK, error)

	SetProjectField(params *SetProjectFieldParams, opts ...ClientOption) (*SetProjectFieldOK, error)

	SetSubprojectsOrder(params *SetSubprojectsOrderParams, opts ...ClientOption) (*SetSubprojectsOrderOK, error)

	UpdateBuildParameter(params *UpdateBuildParameterParams, opts ...ClientOption) (*UpdateBuildParameterOK, error)

	UpdateBuildParameterSpecification(params *UpdateBuildParameterSpecificationParams, opts ...ClientOption) (*UpdateBuildParameterSpecificationOK, error)

	UpdateBuildParameterType(params *UpdateBuildParameterTypeParams, opts ...ClientOption) (*UpdateBuildParameterTypeOK, error)

	UpdateBuildParameterValue(params *UpdateBuildParameterValueParams, opts ...ClientOption) (*UpdateBuildParameterValueOK, error)

	UpdateBuildParameters(params *UpdateBuildParametersParams, opts ...ClientOption) (*UpdateBuildParametersOK, error)

	UpdateFeature(params *UpdateFeatureParams, opts ...ClientOption) (*UpdateFeatureOK, error)

	UpdateFeatures(params *UpdateFeaturesParams, opts ...ClientOption) (*UpdateFeaturesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAgentPoolsProject assigns the matching project to the agent pool
*/
func (a *Client) AddAgentPoolsProject(params *AddAgentPoolsProjectParams, opts ...ClientOption) (*AddAgentPoolsProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAgentPoolsProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAgentPoolsProject",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/agentPools",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAgentPoolsProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAgentPoolsProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAgentPoolsProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddBuildType adds a build configuration to the matching project
*/
func (a *Client) AddBuildType(params *AddBuildTypeParams, opts ...ClientOption) (*AddBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddFeature adds a feature
*/
func (a *Client) AddFeature(params *AddFeatureParams, opts ...ClientOption) (*AddFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addFeature",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddProject creates a new project
*/
func (a *Client) AddProject(params *AddProjectParams, opts ...ClientOption) (*AddProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProject",
		Method:             "POST",
		PathPattern:        "/app/rest/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddSecureToken creates a new secure token for the matching project
*/
func (a *Client) AddSecureToken(params *AddSecureTokenParams, opts ...ClientOption) (*AddSecureTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSecureTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSecureToken",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/secure/tokens",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSecureTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSecureTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSecureToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTemplate adds a build configuration template to the matching project
*/
func (a *Client) AddTemplate(params *AddTemplateParams, opts ...ClientOption) (*AddTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTemplate",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBuildParameter creates a build parameter
*/
func (a *Client) CreateBuildParameter(params *CreateBuildParameterParams, opts ...ClientOption) (*CreateBuildParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBuildParameter",
		Method:             "POST",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBuildParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBuildParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBuildParameter deletes build parameter
*/
func (a *Client) DeleteBuildParameter(params *DeleteBuildParameterParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildParameter",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuildParameters deletes all build parameters
*/
func (a *Client) DeleteBuildParameters(params *DeleteBuildParametersParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildParameters",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteFeature deletes a matching feature
*/
func (a *Client) DeleteFeature(params *DeleteFeatureParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFeature",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteProject deletes project matching the locator
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAgentPoolsProject gets agent pools appointed to the matching project
*/
func (a *Client) GetAgentPoolsProject(params *GetAgentPoolsProjectParams, opts ...ClientOption) (*GetAgentPoolsProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentPoolsProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentPoolsProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/agentPools",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentPoolsProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentPoolsProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentPoolsProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBranches gets all branches of the matching project
*/
func (a *Client) GetAllBranches(params *GetAllBranchesParams, opts ...ClientOption) (*GetAllBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBranchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBranches",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/branches",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBranchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllProjects gets all projects
*/
func (a *Client) GetAllProjects(params *GetAllProjectsParams, opts ...ClientOption) (*GetAllProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllProjects",
		Method:             "GET",
		PathPattern:        "/app/rest/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllProjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllSubprojectsOrdered gets all subprojects ordered of the matching project
*/
func (a *Client) GetAllSubprojectsOrdered(params *GetAllSubprojectsOrderedParams, opts ...ClientOption) (*GetAllSubprojectsOrderedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSubprojectsOrderedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSubprojectsOrdered",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/order/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSubprojectsOrderedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSubprojectsOrderedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSubprojectsOrdered: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameter gets build parameter
*/
func (a *Client) GetBuildParameter(params *GetBuildParameterParams, opts ...ClientOption) (*GetBuildParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameterSpecification gets build parameter specification
*/
func (a *Client) GetBuildParameterSpecification(params *GetBuildParameterSpecificationParams, opts ...ClientOption) (*GetBuildParameterSpecificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterSpecificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameterSpecification",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterSpecificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterSpecificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameterSpecification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameterType gets type of build parameter
*/
func (a *Client) GetBuildParameterType(params *GetBuildParameterTypeParams, opts ...ClientOption) (*GetBuildParameterTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameterType",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameterType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameterValue gets value of build parameter
*/
func (a *Client) GetBuildParameterValue(params *GetBuildParameterValueParams, opts ...ClientOption) (*GetBuildParameterValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameterValue",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/value",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameterValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameters gets build parameters
*/
func (a *Client) GetBuildParameters(params *GetBuildParametersParams, opts ...ClientOption) (*GetBuildParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDefaultTemplate gets the default template of the matching project
*/
func (a *Client) GetDefaultTemplate(params *GetDefaultTemplateParams, opts ...ClientOption) (*GetDefaultTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDefaultTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDefaultTemplate",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/defaultTemplate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDefaultTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDefaultTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDefaultTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeature gets a matching feature
*/
func (a *Client) GetFeature(params *GetFeatureParams, opts ...ClientOption) (*GetFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFeature",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFeatures gets all features
*/
func (a *Client) GetFeatures(params *GetFeaturesParams, opts ...ClientOption) (*GetFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFeatures",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProject gets project matching the locator
*/
func (a *Client) GetProject(params *GetProjectParams, opts ...ClientOption) (*GetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectField gets a field of the matching project
*/
func (a *Client) GetProjectField(params *GetProjectFieldParams, opts ...ClientOption) (*GetProjectFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectField",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectParentProject gets the parent project of the matching project
*/
func (a *Client) GetProjectParentProject(params *GetProjectParentProjectParams, opts ...ClientOption) (*GetProjectParentProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParentProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectParentProject",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/parentProject",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectParentProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectParentProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectParentProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectSettingsFile gets the settings file of the matching build configuration
*/
func (a *Client) GetProjectSettingsFile(params *GetProjectSettingsFileParams, opts ...ClientOption) (*GetProjectSettingsFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectSettingsFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectSettingsFile",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/settingsFile",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectSettingsFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectSettingsFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectSettingsFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectTemplates gets all templates of the matching project
*/
func (a *Client) GetProjectTemplates(params *GetProjectTemplatesParams, opts ...ClientOption) (*GetProjectTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectTemplates",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSecureValue gets a secure token of the matching project
*/
func (a *Client) GetSecureValue(params *GetSecureValueParams, opts ...ClientOption) (*GetSecureValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecureValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSecureValue",
		Method:             "GET",
		PathPattern:        "/app/rest/projects/{projectLocator}/secure/values/{token}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSecureValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSecureValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSecureValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveDefaultTemplate removes the default template from the matching project
*/
func (a *Client) RemoveDefaultTemplate(params *RemoveDefaultTemplateParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDefaultTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDefaultTemplate",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/defaultTemplate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveDefaultTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  RemoveProjectFromAgentPool unassigns a project from the matching agent pool
*/
func (a *Client) RemoveProjectFromAgentPool(params *RemoveProjectFromAgentPoolParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveProjectFromAgentPoolParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeProjectFromAgentPool",
		Method:             "DELETE",
		PathPattern:        "/app/rest/projects/{projectLocator}/agentPools/{agentPoolLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveProjectFromAgentPoolReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  SetAgentPoolsProject updates agent pools apppointed to the matching project
*/
func (a *Client) SetAgentPoolsProject(params *SetAgentPoolsProjectParams, opts ...ClientOption) (*SetAgentPoolsProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentPoolsProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAgentPoolsProject",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/agentPools",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentPoolsProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentPoolsProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentPoolsProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildTypesOrder updates all build configurations order of the matching project
*/
func (a *Client) SetBuildTypesOrder(params *SetBuildTypesOrderParams, opts ...ClientOption) (*SetBuildTypesOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildTypesOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildTypesOrder",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/order/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildTypesOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildTypesOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildTypesOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetDefaultTemplate updates the default template of the matching project
*/
func (a *Client) SetDefaultTemplate(params *SetDefaultTemplateParams, opts ...ClientOption) (*SetDefaultTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDefaultTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setDefaultTemplate",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/defaultTemplate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetDefaultTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDefaultTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setDefaultTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetParentProject updates the parent project of the matching project
*/
func (a *Client) SetParentProject(params *SetParentProjectParams, opts ...ClientOption) (*SetParentProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetParentProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setParentProject",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parentProject",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetParentProjectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetParentProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setParentProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetProjectField updates a field of the matching project
*/
func (a *Client) SetProjectField(params *SetProjectFieldParams, opts ...ClientOption) (*SetProjectFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetProjectFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setProjectField",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetProjectFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetProjectFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setProjectField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetSubprojectsOrder updates all subprojects order of the matching project
*/
func (a *Client) SetSubprojectsOrder(params *SetSubprojectsOrderParams, opts ...ClientOption) (*SetSubprojectsOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSubprojectsOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setSubprojectsOrder",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/order/projects",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetSubprojectsOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetSubprojectsOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setSubprojectsOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameter updates build parameter
*/
func (a *Client) UpdateBuildParameter(params *UpdateBuildParameterParams, opts ...ClientOption) (*UpdateBuildParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameterSpecification updates build parameter specification
*/
func (a *Client) UpdateBuildParameterSpecification(params *UpdateBuildParameterSpecificationParams, opts ...ClientOption) (*UpdateBuildParameterSpecificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterSpecificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameterSpecification",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type/rawValue",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterSpecificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterSpecificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameterSpecification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameterType updates type of build parameter
*/
func (a *Client) UpdateBuildParameterType(params *UpdateBuildParameterTypeParams, opts ...ClientOption) (*UpdateBuildParameterTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameterType",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/type",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameterType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameterValue updates value of build parameter
*/
func (a *Client) UpdateBuildParameterValue(params *UpdateBuildParameterValueParams, opts ...ClientOption) (*UpdateBuildParameterValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterValueParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameterValue",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters/{name}/value",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameterValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameters updates build parameters
*/
func (a *Client) UpdateBuildParameters(params *UpdateBuildParametersParams, opts ...ClientOption) (*UpdateBuildParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFeature updates a matching feature
*/
func (a *Client) UpdateFeature(params *UpdateFeatureParams, opts ...ClientOption) (*UpdateFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFeature",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures/{featureLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateFeatures updates all features
*/
func (a *Client) UpdateFeatures(params *UpdateFeaturesParams, opts ...ClientOption) (*UpdateFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFeatures",
		Method:             "PUT",
		PathPattern:        "/app/rest/projects/{projectLocator}/projectFeatures",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
