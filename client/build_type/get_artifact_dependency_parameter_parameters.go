// Code generated by go-swagger; DO NOT EDIT.

package build_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetArtifactDependencyParameterParams creates a new GetArtifactDependencyParameterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetArtifactDependencyParameterParams() *GetArtifactDependencyParameterParams {
	return &GetArtifactDependencyParameterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetArtifactDependencyParameterParamsWithTimeout creates a new GetArtifactDependencyParameterParams object
// with the ability to set a timeout on a request.
func NewGetArtifactDependencyParameterParamsWithTimeout(timeout time.Duration) *GetArtifactDependencyParameterParams {
	return &GetArtifactDependencyParameterParams{
		timeout: timeout,
	}
}

// NewGetArtifactDependencyParameterParamsWithContext creates a new GetArtifactDependencyParameterParams object
// with the ability to set a context for a request.
func NewGetArtifactDependencyParameterParamsWithContext(ctx context.Context) *GetArtifactDependencyParameterParams {
	return &GetArtifactDependencyParameterParams{
		Context: ctx,
	}
}

// NewGetArtifactDependencyParameterParamsWithHTTPClient creates a new GetArtifactDependencyParameterParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetArtifactDependencyParameterParamsWithHTTPClient(client *http.Client) *GetArtifactDependencyParameterParams {
	return &GetArtifactDependencyParameterParams{
		HTTPClient: client,
	}
}

/* GetArtifactDependencyParameterParams contains all the parameters to send to the API endpoint
   for the get artifact dependency parameter operation.

   Typically these are written to a http.Request.
*/
type GetArtifactDependencyParameterParams struct {

	// ArtifactDepLocator.
	ArtifactDepLocator string

	// BtLocator.
	//
	// Format: BuildTypeLocator
	BtLocator string

	// FieldName.
	FieldName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get artifact dependency parameter params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArtifactDependencyParameterParams) WithDefaults() *GetArtifactDependencyParameterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get artifact dependency parameter params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetArtifactDependencyParameterParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) WithTimeout(timeout time.Duration) *GetArtifactDependencyParameterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) WithContext(ctx context.Context) *GetArtifactDependencyParameterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) WithHTTPClient(client *http.Client) *GetArtifactDependencyParameterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArtifactDepLocator adds the artifactDepLocator to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) WithArtifactDepLocator(artifactDepLocator string) *GetArtifactDependencyParameterParams {
	o.SetArtifactDepLocator(artifactDepLocator)
	return o
}

// SetArtifactDepLocator adds the artifactDepLocator to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) SetArtifactDepLocator(artifactDepLocator string) {
	o.ArtifactDepLocator = artifactDepLocator
}

// WithBtLocator adds the btLocator to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) WithBtLocator(btLocator string) *GetArtifactDependencyParameterParams {
	o.SetBtLocator(btLocator)
	return o
}

// SetBtLocator adds the btLocator to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) SetBtLocator(btLocator string) {
	o.BtLocator = btLocator
}

// WithFieldName adds the fieldName to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) WithFieldName(fieldName string) *GetArtifactDependencyParameterParams {
	o.SetFieldName(fieldName)
	return o
}

// SetFieldName adds the fieldName to the get artifact dependency parameter params
func (o *GetArtifactDependencyParameterParams) SetFieldName(fieldName string) {
	o.FieldName = fieldName
}

// WriteToRequest writes these params to a swagger request
func (o *GetArtifactDependencyParameterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param artifactDepLocator
	if err := r.SetPathParam("artifactDepLocator", o.ArtifactDepLocator); err != nil {
		return err
	}

	// path param btLocator
	if err := r.SetPathParam("btLocator", o.BtLocator); err != nil {
		return err
	}

	// path param fieldName
	if err := r.SetPathParam("fieldName", o.FieldName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
