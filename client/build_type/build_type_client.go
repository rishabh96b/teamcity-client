// Code generated by go-swagger; DO NOT EDIT.

package build_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new build type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAgentRequirementToBuildType(params *AddAgentRequirementToBuildTypeParams, opts ...ClientOption) (*AddAgentRequirementToBuildTypeOK, error)

	AddArtifactDependencyToBuildType(params *AddArtifactDependencyToBuildTypeParams, opts ...ClientOption) (*AddArtifactDependencyToBuildTypeOK, error)

	AddBuildFeatureToBuildType(params *AddBuildFeatureToBuildTypeParams, opts ...ClientOption) (*AddBuildFeatureToBuildTypeOK, error)

	AddBuildStepToBuildType(params *AddBuildStepToBuildTypeParams, opts ...ClientOption) (*AddBuildStepToBuildTypeOK, error)

	AddBuildTemplate(params *AddBuildTemplateParams, opts ...ClientOption) (*AddBuildTemplateOK, error)

	AddParameterToBuildFeature(params *AddParameterToBuildFeatureParams, opts ...ClientOption) (*AddParameterToBuildFeatureOK, error)

	AddParameterToBuildStep(params *AddParameterToBuildStepParams, opts ...ClientOption) (*AddParameterToBuildStepOK, error)

	AddSnapshotDependencyToBuildType(params *AddSnapshotDependencyToBuildTypeParams, opts ...ClientOption) (*AddSnapshotDependencyToBuildTypeOK, error)

	AddTriggerToBuildType(params *AddTriggerToBuildTypeParams, opts ...ClientOption) (*AddTriggerToBuildTypeOK, error)

	AddVcsRootToBuildType(params *AddVcsRootToBuildTypeParams, opts ...ClientOption) (*AddVcsRootToBuildTypeOK, error)

	CreateBuildParameterOfBuildType(params *CreateBuildParameterOfBuildTypeParams, opts ...ClientOption) (*CreateBuildParameterOfBuildTypeOK, error)

	CreateBuildType(params *CreateBuildTypeParams, opts ...ClientOption) (*CreateBuildTypeOK, error)

	DeleteAgentRequirement(params *DeleteAgentRequirementParams, opts ...ClientOption) error

	DeleteArtifactDependency(params *DeleteArtifactDependencyParams, opts ...ClientOption) error

	DeleteBuildParameterOfBuildType(params *DeleteBuildParameterOfBuildTypeParams, opts ...ClientOption) error

	DeleteBuildParametersOfBuildType(params *DeleteBuildParametersOfBuildTypeParams, opts ...ClientOption) error

	DeleteBuildStep(params *DeleteBuildStepParams, opts ...ClientOption) error

	DeleteBuildStepParameters(params *DeleteBuildStepParametersParams, opts ...ClientOption) (*DeleteBuildStepParametersOK, error)

	DeleteBuildType(params *DeleteBuildTypeParams, opts ...ClientOption) error

	DeleteFeatureOfBuildType(params *DeleteFeatureOfBuildTypeParams, opts ...ClientOption) error

	DeleteSnapshotDependency(params *DeleteSnapshotDependencyParams, opts ...ClientOption) error

	DeleteTrigger(params *DeleteTriggerParams, opts ...ClientOption) error

	DeleteVcsRootOfBuildType(params *DeleteVcsRootOfBuildTypeParams, opts ...ClientOption) error

	DownloadFileOfBuildType(params *DownloadFileOfBuildTypeParams, opts ...ClientOption) error

	GetAgentRequirement(params *GetAgentRequirementParams, opts ...ClientOption) (*GetAgentRequirementOK, error)

	GetAgentRequirementParameter(params *GetAgentRequirementParameterParams, opts ...ClientOption) (*GetAgentRequirementParameterOK, error)

	GetAliases(params *GetAliasesParams, opts ...ClientOption) (*GetAliasesOK, error)

	GetAllAgentRequirements(params *GetAllAgentRequirementsParams, opts ...ClientOption) (*GetAllAgentRequirementsOK, error)

	GetAllArtifactDependencies(params *GetAllArtifactDependenciesParams, opts ...ClientOption) (*GetAllArtifactDependenciesOK, error)

	GetAllBranchesOfBuildType(params *GetAllBranchesOfBuildTypeParams, opts ...ClientOption) (*GetAllBranchesOfBuildTypeOK, error)

	GetAllBuildFeatureParameters(params *GetAllBuildFeatureParametersParams, opts ...ClientOption) (*GetAllBuildFeatureParametersOK, error)

	GetAllBuildFeatures(params *GetAllBuildFeaturesParams, opts ...ClientOption) (*GetAllBuildFeaturesOK, error)

	GetAllBuildStepParameters(params *GetAllBuildStepParametersParams, opts ...ClientOption) (*GetAllBuildStepParametersOK, error)

	GetAllBuildSteps(params *GetAllBuildStepsParams, opts ...ClientOption) (*GetAllBuildStepsOK, error)

	GetAllBuildTemplates(params *GetAllBuildTemplatesParams, opts ...ClientOption) (*GetAllBuildTemplatesOK, error)

	GetAllBuildTypes(params *GetAllBuildTypesParams, opts ...ClientOption) (*GetAllBuildTypesOK, error)

	GetAllInvestigationsOfBuildType(params *GetAllInvestigationsOfBuildTypeParams, opts ...ClientOption) (*GetAllInvestigationsOfBuildTypeOK, error)

	GetAllSnapshotDependencies(params *GetAllSnapshotDependenciesParams, opts ...ClientOption) (*GetAllSnapshotDependenciesOK, error)

	GetAllTriggers(params *GetAllTriggersParams, opts ...ClientOption) (*GetAllTriggersOK, error)

	GetAllVcsRootsOfBuildType(params *GetAllVcsRootsOfBuildTypeParams, opts ...ClientOption) (*GetAllVcsRootsOfBuildTypeOK, error)

	GetArtifactDependency(params *GetArtifactDependencyParams, opts ...ClientOption) (*GetArtifactDependencyOK, error)

	GetArtifactDependencyParameter(params *GetArtifactDependencyParameterParams, opts ...ClientOption) (*GetArtifactDependencyParameterOK, error)

	GetBuildFeature(params *GetBuildFeatureParams, opts ...ClientOption) (*GetBuildFeatureOK, error)

	GetBuildFeatureParameter(params *GetBuildFeatureParameterParams, opts ...ClientOption) (*GetBuildFeatureParameterOK, error)

	GetBuildFeatureSetting(params *GetBuildFeatureSettingParams, opts ...ClientOption) (*GetBuildFeatureSettingOK, error)

	GetBuildParameterOfBuildType(params *GetBuildParameterOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterOfBuildTypeOK, error)

	GetBuildParameterSpecificationOfBuildType(params *GetBuildParameterSpecificationOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterSpecificationOfBuildTypeOK, error)

	GetBuildParameterTypeOfBuildType(params *GetBuildParameterTypeOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterTypeOfBuildTypeOK, error)

	GetBuildParameterValueOfBuildType(params *GetBuildParameterValueOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterValueOfBuildTypeOK, error)

	GetBuildParametersOfBuildType(params *GetBuildParametersOfBuildTypeParams, opts ...ClientOption) (*GetBuildParametersOfBuildTypeOK, error)

	GetBuildStep(params *GetBuildStepParams, opts ...ClientOption) (*GetBuildStepOK, error)

	GetBuildStepParameter(params *GetBuildStepParameterParams, opts ...ClientOption) (*GetBuildStepParameterOK, error)

	GetBuildStepSetting(params *GetBuildStepSettingParams, opts ...ClientOption) (*GetBuildStepSettingOK, error)

	GetBuildTemplate(params *GetBuildTemplateParams, opts ...ClientOption) (*GetBuildTemplateOK, error)

	GetBuildType(params *GetBuildTypeParams, opts ...ClientOption) (*GetBuildTypeOK, error)

	GetBuildTypeBuildTags(params *GetBuildTypeBuildTagsParams, opts ...ClientOption) (*GetBuildTypeBuildTagsOK, error)

	GetBuildTypeBuilds(params *GetBuildTypeBuildsParams, opts ...ClientOption) (*GetBuildTypeBuildsOK, error)

	GetBuildTypeField(params *GetBuildTypeFieldParams, opts ...ClientOption) (*GetBuildTypeFieldOK, error)

	GetBuildTypeSettingsFile(params *GetBuildTypeSettingsFileParams, opts ...ClientOption) (*GetBuildTypeSettingsFileOK, error)

	GetFileMetadataOfBuildType(params *GetFileMetadataOfBuildTypeParams, opts ...ClientOption) (*GetFileMetadataOfBuildTypeOK, error)

	GetFilesListForSubpathOfBuildType(params *GetFilesListForSubpathOfBuildTypeParams, opts ...ClientOption) (*GetFilesListForSubpathOfBuildTypeOK, error)

	GetFilesListOfBuildType(params *GetFilesListOfBuildTypeParams, opts ...ClientOption) (*GetFilesListOfBuildTypeOK, error)

	GetSnapshotDependency(params *GetSnapshotDependencyParams, opts ...ClientOption) (*GetSnapshotDependencyOK, error)

	GetTrigger(params *GetTriggerParams, opts ...ClientOption) (*GetTriggerOK, error)

	GetTriggerParameter(params *GetTriggerParameterParams, opts ...ClientOption) (*GetTriggerParameterOK, error)

	GetVcsRoot(params *GetVcsRootParams, opts ...ClientOption) (*GetVcsRootOK, error)

	GetVcsRootCheckoutRules(params *GetVcsRootCheckoutRulesParams, opts ...ClientOption) (*GetVcsRootCheckoutRulesOK, error)

	GetVcsRootInstancesOfBuildType(params *GetVcsRootInstancesOfBuildTypeParams, opts ...ClientOption) (*GetVcsRootInstancesOfBuildTypeOK, error)

	GetZippedFileOfBuildType(params *GetZippedFileOfBuildTypeParams, opts ...ClientOption) error

	RemoveAllTemplates(params *RemoveAllTemplatesParams, opts ...ClientOption) error

	RemoveTemplate(params *RemoveTemplateParams, opts ...ClientOption) error

	ReplaceAgentRequirement(params *ReplaceAgentRequirementParams, opts ...ClientOption) (*ReplaceAgentRequirementOK, error)

	ReplaceAllAgentRequirements(params *ReplaceAllAgentRequirementsParams, opts ...ClientOption) (*ReplaceAllAgentRequirementsOK, error)

	ReplaceAllArtifactDependencies(params *ReplaceAllArtifactDependenciesParams, opts ...ClientOption) (*ReplaceAllArtifactDependenciesOK, error)

	ReplaceAllBuildFeatures(params *ReplaceAllBuildFeaturesParams, opts ...ClientOption) (*ReplaceAllBuildFeaturesOK, error)

	ReplaceAllBuildSteps(params *ReplaceAllBuildStepsParams, opts ...ClientOption) (*ReplaceAllBuildStepsOK, error)

	ReplaceAllSnapshotDependencies(params *ReplaceAllSnapshotDependenciesParams, opts ...ClientOption) (*ReplaceAllSnapshotDependenciesOK, error)

	ReplaceAllTriggers(params *ReplaceAllTriggersParams, opts ...ClientOption) (*ReplaceAllTriggersOK, error)

	ReplaceAllVcsRoots(params *ReplaceAllVcsRootsParams, opts ...ClientOption) (*ReplaceAllVcsRootsOK, error)

	ReplaceArtifactDependency(params *ReplaceArtifactDependencyParams, opts ...ClientOption) (*ReplaceArtifactDependencyOK, error)

	ReplaceBuildFeature(params *ReplaceBuildFeatureParams, opts ...ClientOption) (*ReplaceBuildFeatureOK, error)

	ReplaceBuildFeatureParameters(params *ReplaceBuildFeatureParametersParams, opts ...ClientOption) (*ReplaceBuildFeatureParametersOK, error)

	ReplaceBuildStep(params *ReplaceBuildStepParams, opts ...ClientOption) (*ReplaceBuildStepOK, error)

	ReplaceSnapshotDependency(params *ReplaceSnapshotDependencyParams, opts ...ClientOption) (*ReplaceSnapshotDependencyOK, error)

	ReplaceTrigger(params *ReplaceTriggerParams, opts ...ClientOption) (*ReplaceTriggerOK, error)

	SetAgentRequirementParameter(params *SetAgentRequirementParameterParams, opts ...ClientOption) (*SetAgentRequirementParameterOK, error)

	SetArtifactDependencyParameter(params *SetArtifactDependencyParameterParams, opts ...ClientOption) (*SetArtifactDependencyParameterOK, error)

	SetBuildFeatureParameter(params *SetBuildFeatureParameterParams, opts ...ClientOption) (*SetBuildFeatureParameterOK, error)

	SetBuildStepParameter(params *SetBuildStepParameterParams, opts ...ClientOption) (*SetBuildStepParameterOK, error)

	SetBuildTypeField(params *SetBuildTypeFieldParams, opts ...ClientOption) (*SetBuildTypeFieldOK, error)

	SetBuildTypeTemplates(params *SetBuildTypeTemplatesParams, opts ...ClientOption) (*SetBuildTypeTemplatesOK, error)

	SetTriggerParameter(params *SetTriggerParameterParams, opts ...ClientOption) (*SetTriggerParameterOK, error)

	UpdateBuildParameterOfBuildType(params *UpdateBuildParameterOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterOfBuildTypeOK, error)

	UpdateBuildParameterSpecificationOfBuildType(params *UpdateBuildParameterSpecificationOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterSpecificationOfBuildTypeOK, error)

	UpdateBuildParameterTypeOfBuildType(params *UpdateBuildParameterTypeOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterTypeOfBuildTypeOK, error)

	UpdateBuildParameterValueOfBuildType(params *UpdateBuildParameterValueOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterValueOfBuildTypeOK, error)

	UpdateBuildParametersOfBuildType(params *UpdateBuildParametersOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParametersOfBuildTypeOK, error)

	UpdateBuildTypeVcsRoot(params *UpdateBuildTypeVcsRootParams, opts ...ClientOption) (*UpdateBuildTypeVcsRootOK, error)

	UpdateBuildTypeVcsRootCheckoutRules(params *UpdateBuildTypeVcsRootCheckoutRulesParams, opts ...ClientOption) (*UpdateBuildTypeVcsRootCheckoutRulesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAgentRequirementToBuildType adds an agent requirement to the matching build configuration
*/
func (a *Client) AddAgentRequirementToBuildType(params *AddAgentRequirementToBuildTypeParams, opts ...ClientOption) (*AddAgentRequirementToBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAgentRequirementToBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAgentRequirementToBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAgentRequirementToBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAgentRequirementToBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAgentRequirementToBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddArtifactDependencyToBuildType adds an artifact dependency to the matching build configuration
*/
func (a *Client) AddArtifactDependencyToBuildType(params *AddArtifactDependencyToBuildTypeParams, opts ...ClientOption) (*AddArtifactDependencyToBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddArtifactDependencyToBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addArtifactDependencyToBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddArtifactDependencyToBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddArtifactDependencyToBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addArtifactDependencyToBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddBuildFeatureToBuildType adds build feature to the matching build configuration
*/
func (a *Client) AddBuildFeatureToBuildType(params *AddBuildFeatureToBuildTypeParams, opts ...ClientOption) (*AddBuildFeatureToBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildFeatureToBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildFeatureToBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildFeatureToBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildFeatureToBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBuildFeatureToBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddBuildStepToBuildType adds a build step to the matching build configuration
*/
func (a *Client) AddBuildStepToBuildType(params *AddBuildStepToBuildTypeParams, opts ...ClientOption) (*AddBuildStepToBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildStepToBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildStepToBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildStepToBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildStepToBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBuildStepToBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddBuildTemplate adds a build template to the matching build configuration
*/
func (a *Client) AddBuildTemplate(params *AddBuildTemplateParams, opts ...ClientOption) (*AddBuildTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBuildTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBuildTemplate",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBuildTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBuildTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addBuildTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddParameterToBuildFeature updates build feature parameter for the matching build configuration
*/
func (a *Client) AddParameterToBuildFeature(params *AddParameterToBuildFeatureParams, opts ...ClientOption) (*AddParameterToBuildFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddParameterToBuildFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addParameterToBuildFeature",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddParameterToBuildFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddParameterToBuildFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addParameterToBuildFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddParameterToBuildStep adds a parameter to a build step of the matching build configuration
*/
func (a *Client) AddParameterToBuildStep(params *AddParameterToBuildStepParams, opts ...ClientOption) (*AddParameterToBuildStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddParameterToBuildStepParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addParameterToBuildStep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddParameterToBuildStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddParameterToBuildStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addParameterToBuildStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddSnapshotDependencyToBuildType adds a snapshot dependency to the matching build configuration
*/
func (a *Client) AddSnapshotDependencyToBuildType(params *AddSnapshotDependencyToBuildTypeParams, opts ...ClientOption) (*AddSnapshotDependencyToBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSnapshotDependencyToBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSnapshotDependencyToBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSnapshotDependencyToBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSnapshotDependencyToBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSnapshotDependencyToBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTriggerToBuildType adds a trigger to the matching build configuration
*/
func (a *Client) AddTriggerToBuildType(params *AddTriggerToBuildTypeParams, opts ...ClientOption) (*AddTriggerToBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTriggerToBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTriggerToBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTriggerToBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTriggerToBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTriggerToBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVcsRootToBuildType adds a v c s root to the matching build
*/
func (a *Client) AddVcsRootToBuildType(params *AddVcsRootToBuildTypeParams, opts ...ClientOption) (*AddVcsRootToBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVcsRootToBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVcsRootToBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVcsRootToBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVcsRootToBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVcsRootToBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBuildParameterOfBuildType creates a build parameter
*/
func (a *Client) CreateBuildParameterOfBuildType(params *CreateBuildParameterOfBuildTypeParams, opts ...ClientOption) (*CreateBuildParameterOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildParameterOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBuildParameterOfBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBuildParameterOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildParameterOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBuildParameterOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateBuildType creates a new build configuration
*/
func (a *Client) CreateBuildType(params *CreateBuildTypeParams, opts ...ClientOption) (*CreateBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBuildType",
		Method:             "POST",
		PathPattern:        "/app/rest/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteAgentRequirement removes an agent requirement of the matching build configuration
*/
func (a *Client) DeleteAgentRequirement(params *DeleteAgentRequirementParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAgentRequirementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAgentRequirement",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAgentRequirementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteArtifactDependency removes an artifact dependency from the matching build configuration
*/
func (a *Client) DeleteArtifactDependency(params *DeleteArtifactDependencyParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteArtifactDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteArtifactDependency",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteArtifactDependencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuildParameterOfBuildType deletes build parameter
*/
func (a *Client) DeleteBuildParameterOfBuildType(params *DeleteBuildParameterOfBuildTypeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParameterOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildParameterOfBuildType",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildParameterOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuildParametersOfBuildType deletes all build parameters
*/
func (a *Client) DeleteBuildParametersOfBuildType(params *DeleteBuildParametersOfBuildTypeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParametersOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildParametersOfBuildType",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildParametersOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuildStep deletes a build step of the matching build configuration
*/
func (a *Client) DeleteBuildStep(params *DeleteBuildStepParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildStepParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildStep",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteBuildStepParameters updates a parameter of a build step of the matching build configuration
*/
func (a *Client) DeleteBuildStepParameters(params *DeleteBuildStepParametersParams, opts ...ClientOption) (*DeleteBuildStepParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildStepParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildStepParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildStepParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBuildStepParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteBuildStepParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteBuildType deletes build configuration matching the locator
*/
func (a *Client) DeleteBuildType(params *DeleteBuildTypeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBuildType",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteFeatureOfBuildType removes a build feature of the matching build configuration
*/
func (a *Client) DeleteFeatureOfBuildType(params *DeleteFeatureOfBuildTypeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFeatureOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFeatureOfBuildType",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFeatureOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteSnapshotDependency deletes a snapshot dependency of the matching build configuration
*/
func (a *Client) DeleteSnapshotDependency(params *DeleteSnapshotDependencyParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSnapshotDependency",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotDependencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteTrigger deletes a trigger of the matching build configuration
*/
func (a *Client) DeleteTrigger(params *DeleteTriggerParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTrigger",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTriggerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteVcsRootOfBuildType removes a v c s root of the matching build configuration
*/
func (a *Client) DeleteVcsRootOfBuildType(params *DeleteVcsRootOfBuildTypeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVcsRootOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVcsRootOfBuildType",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVcsRootOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  DownloadFileOfBuildType downloads specific file
*/
func (a *Client) DownloadFileOfBuildType(params *DownloadFileOfBuildTypeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFileOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadFileOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/files{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DownloadFileOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAgentRequirement gets an agent requirement of the matching build configuration
*/
func (a *Client) GetAgentRequirement(params *GetAgentRequirementParams, opts ...ClientOption) (*GetAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentRequirementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentRequirement",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentRequirementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentRequirementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentRequirement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAgentRequirementParameter gets a setting of an agent requirement of the matching build configuration
*/
func (a *Client) GetAgentRequirementParameter(params *GetAgentRequirementParameterParams, opts ...ClientOption) (*GetAgentRequirementParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentRequirementParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentRequirementParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAgentRequirementParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentRequirementParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentRequirementParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAliases gets external i ds of the matching build configuration
*/
func (a *Client) GetAliases(params *GetAliasesParams, opts ...ClientOption) (*GetAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAliasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAliases",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/aliases",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAliasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAliasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAliases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllAgentRequirements gets all agent requirements of the matching build configuration
*/
func (a *Client) GetAllAgentRequirements(params *GetAllAgentRequirementsParams, opts ...ClientOption) (*GetAllAgentRequirementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAgentRequirementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAgentRequirements",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllAgentRequirementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAgentRequirementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAgentRequirements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllArtifactDependencies gets all artifact dependencies of the matching build configuration
*/
func (a *Client) GetAllArtifactDependencies(params *GetAllArtifactDependenciesParams, opts ...ClientOption) (*GetAllArtifactDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllArtifactDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllArtifactDependencies",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllArtifactDependenciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllArtifactDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllArtifactDependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBranchesOfBuildType gets all branches of the matching build configuration
*/
func (a *Client) GetAllBranchesOfBuildType(params *GetAllBranchesOfBuildTypeParams, opts ...ClientOption) (*GetAllBranchesOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBranchesOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBranchesOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/branches",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBranchesOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBranchesOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBranchesOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBuildFeatureParameters gets all parameters of a build feature of the matching build configuration
*/
func (a *Client) GetAllBuildFeatureParameters(params *GetAllBuildFeatureParametersParams, opts ...ClientOption) (*GetAllBuildFeatureParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildFeatureParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBuildFeatureParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildFeatureParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBuildFeatureParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBuildFeatureParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBuildFeatures gets all build features of the matching build configuration
*/
func (a *Client) GetAllBuildFeatures(params *GetAllBuildFeaturesParams, opts ...ClientOption) (*GetAllBuildFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBuildFeatures",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBuildFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBuildFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBuildStepParameters gets all parameters of a build step of the matching build configuration
*/
func (a *Client) GetAllBuildStepParameters(params *GetAllBuildStepParametersParams, opts ...ClientOption) (*GetAllBuildStepParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildStepParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBuildStepParameters",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildStepParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBuildStepParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBuildStepParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBuildSteps gets all build steps of the matching build configuration
*/
func (a *Client) GetAllBuildSteps(params *GetAllBuildStepsParams, opts ...ClientOption) (*GetAllBuildStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildStepsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBuildSteps",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildStepsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBuildStepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBuildSteps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBuildTemplates gets all build templates of the matching build configuration
*/
func (a *Client) GetAllBuildTemplates(params *GetAllBuildTemplatesParams, opts ...ClientOption) (*GetAllBuildTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBuildTemplates",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBuildTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBuildTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllBuildTypes gets all build configurations
*/
func (a *Client) GetAllBuildTypes(params *GetAllBuildTypesParams, opts ...ClientOption) (*GetAllBuildTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBuildTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllBuildTypes",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllBuildTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBuildTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllBuildTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllInvestigationsOfBuildType gets all investigations of the matching build configuration
*/
func (a *Client) GetAllInvestigationsOfBuildType(params *GetAllInvestigationsOfBuildTypeParams, opts ...ClientOption) (*GetAllInvestigationsOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllInvestigationsOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllInvestigationsOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/investigations",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllInvestigationsOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllInvestigationsOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllInvestigationsOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllSnapshotDependencies gets all snapshot dependencies of the matching build configuration
*/
func (a *Client) GetAllSnapshotDependencies(params *GetAllSnapshotDependenciesParams, opts ...ClientOption) (*GetAllSnapshotDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSnapshotDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSnapshotDependencies",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllSnapshotDependenciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSnapshotDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSnapshotDependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllTriggers gets all triggers of the matching build configuration
*/
func (a *Client) GetAllTriggers(params *GetAllTriggersParams, opts ...ClientOption) (*GetAllTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTriggers",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllTriggersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllVcsRootsOfBuildType gets all v c s roots of the matching build configuration
*/
func (a *Client) GetAllVcsRootsOfBuildType(params *GetAllVcsRootsOfBuildTypeParams, opts ...ClientOption) (*GetAllVcsRootsOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllVcsRootsOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllVcsRootsOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllVcsRootsOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllVcsRootsOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllVcsRootsOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactDependency gets an artifact dependency of the matching build configuration
*/
func (a *Client) GetArtifactDependency(params *GetArtifactDependencyParams, opts ...ClientOption) (*GetArtifactDependencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactDependency",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDependencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactDependencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactDependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArtifactDependencyParameter gets a parameter of an artifact dependency of the matching build configuration
*/
func (a *Client) GetArtifactDependencyParameter(params *GetArtifactDependencyParameterParams, opts ...ClientOption) (*GetArtifactDependencyParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactDependencyParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArtifactDependencyParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetArtifactDependencyParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactDependencyParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArtifactDependencyParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildFeature gets a build feature of the matching build configuration
*/
func (a *Client) GetBuildFeature(params *GetBuildFeatureParams, opts ...ClientOption) (*GetBuildFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildFeature",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildFeatureParameter gets a parameter of a build feature of the matching build configuration
*/
func (a *Client) GetBuildFeatureParameter(params *GetBuildFeatureParameterParams, opts ...ClientOption) (*GetBuildFeatureParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFeatureParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildFeatureParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFeatureParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFeatureParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildFeatureParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildFeatureSetting gets the setting of a build feature of the matching build configuration
*/
func (a *Client) GetBuildFeatureSetting(params *GetBuildFeatureSettingParams, opts ...ClientOption) (*GetBuildFeatureSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildFeatureSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildFeatureSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildFeatureSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildFeatureSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildFeatureSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameterOfBuildType gets build parameter
*/
func (a *Client) GetBuildParameterOfBuildType(params *GetBuildParameterOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameterOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameterOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameterSpecificationOfBuildType gets build parameter specification
*/
func (a *Client) GetBuildParameterSpecificationOfBuildType(params *GetBuildParameterSpecificationOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterSpecificationOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterSpecificationOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameterSpecificationOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterSpecificationOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterSpecificationOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameterSpecificationOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameterTypeOfBuildType gets type of build parameter
*/
func (a *Client) GetBuildParameterTypeOfBuildType(params *GetBuildParameterTypeOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterTypeOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterTypeOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameterTypeOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterTypeOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterTypeOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameterTypeOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParameterValueOfBuildType gets value of build parameter
*/
func (a *Client) GetBuildParameterValueOfBuildType(params *GetBuildParameterValueOfBuildTypeParams, opts ...ClientOption) (*GetBuildParameterValueOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParameterValueOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParameterValueOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}/value",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParameterValueOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParameterValueOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParameterValueOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildParametersOfBuildType gets build parameters
*/
func (a *Client) GetBuildParametersOfBuildType(params *GetBuildParametersOfBuildTypeParams, opts ...ClientOption) (*GetBuildParametersOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParametersOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildParametersOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildParametersOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildParametersOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildParametersOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildStep gets a build step of the matching build configuration
*/
func (a *Client) GetBuildStep(params *GetBuildStepParams, opts ...ClientOption) (*GetBuildStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStepParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildStep",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildStepParameter gets a parameter of a build step of the matching build configuration
*/
func (a *Client) GetBuildStepParameter(params *GetBuildStepParameterParams, opts ...ClientOption) (*GetBuildStepParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStepParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildStepParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/parameters/{parameterName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStepParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildStepParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildStepParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildStepSetting gets the setting of a build step of the matching build configuration
*/
func (a *Client) GetBuildStepSetting(params *GetBuildStepSettingParams, opts ...ClientOption) (*GetBuildStepSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildStepSettingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildStepSetting",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildStepSettingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildStepSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildStepSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTemplate gets a template of the matching build configuration
*/
func (a *Client) GetBuildTemplate(params *GetBuildTemplateParams, opts ...ClientOption) (*GetBuildTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildTemplate",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildType gets build configuration matching the locator
*/
func (a *Client) GetBuildType(params *GetBuildTypeParams, opts ...ClientOption) (*GetBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTypeBuildTags gets tags of builds of the matching build configuration
*/
func (a *Client) GetBuildTypeBuildTags(params *GetBuildTypeBuildTagsParams, opts ...ClientOption) (*GetBuildTypeBuildTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypeBuildTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildTypeBuildTags",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/buildTags",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypeBuildTagsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTypeBuildTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTypeBuildTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTypeBuilds gets builds of the matching build configuration
*/
func (a *Client) GetBuildTypeBuilds(params *GetBuildTypeBuildsParams, opts ...ClientOption) (*GetBuildTypeBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypeBuildsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildTypeBuilds",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/builds",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypeBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTypeBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTypeBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTypeField gets a field of the matching build configuration
*/
func (a *Client) GetBuildTypeField(params *GetBuildTypeFieldParams, opts ...ClientOption) (*GetBuildTypeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypeFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildTypeField",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypeFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTypeFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTypeField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBuildTypeSettingsFile gets the settings file of the matching build configuration
*/
func (a *Client) GetBuildTypeSettingsFile(params *GetBuildTypeSettingsFileParams, opts ...ClientOption) (*GetBuildTypeSettingsFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildTypeSettingsFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBuildTypeSettingsFile",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/settingsFile",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBuildTypeSettingsFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildTypeSettingsFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBuildTypeSettingsFile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileMetadataOfBuildType gets metadata of specific file
*/
func (a *Client) GetFileMetadataOfBuildType(params *GetFileMetadataOfBuildTypeParams, opts ...ClientOption) (*GetFileMetadataOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileMetadataOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileMetadataOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/metadata{path}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileMetadataOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileMetadataOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileMetadataOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilesListForSubpathOfBuildType lists files under this path
*/
func (a *Client) GetFilesListForSubpathOfBuildType(params *GetFilesListForSubpathOfBuildTypeParams, opts ...ClientOption) (*GetFilesListForSubpathOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesListForSubpathOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesListForSubpathOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/{path}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesListForSubpathOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesListForSubpathOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilesListForSubpathOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFilesListOfBuildType lists all files
*/
func (a *Client) GetFilesListOfBuildType(params *GetFilesListOfBuildTypeParams, opts ...ClientOption) (*GetFilesListOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesListOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilesListOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs/files/latest",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFilesListOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesListOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFilesListOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSnapshotDependency gets a snapshot dependency of the matching build configuration
*/
func (a *Client) GetSnapshotDependency(params *GetSnapshotDependencyParams, opts ...ClientOption) (*GetSnapshotDependencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSnapshotDependency",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotDependencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSnapshotDependencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSnapshotDependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTrigger gets a trigger of the matching build configuration
*/
func (a *Client) GetTrigger(params *GetTriggerParams, opts ...ClientOption) (*GetTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTrigger",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTriggerParameter gets a parameter of a trigger of the matching build configuration
*/
func (a *Client) GetTriggerParameter(params *GetTriggerParameterParams, opts ...ClientOption) (*GetTriggerParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTriggerParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTriggerParameter",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTriggerParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTriggerParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTriggerParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRoot gets a v c s root of the matching build configuration
*/
func (a *Client) GetVcsRoot(params *GetVcsRootParams, opts ...ClientOption) (*GetVcsRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRoot",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootCheckoutRules gets checkout rules of a v c s root of the matching build configuration
*/
func (a *Client) GetVcsRootCheckoutRules(params *GetVcsRootCheckoutRulesParams, opts ...ClientOption) (*GetVcsRootCheckoutRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootCheckoutRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootCheckoutRules",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootCheckoutRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootCheckoutRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootCheckoutRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVcsRootInstancesOfBuildType gets all v c s root instances of the matching build configuration
*/
func (a *Client) GetVcsRootInstancesOfBuildType(params *GetVcsRootInstancesOfBuildTypeParams, opts ...ClientOption) (*GetVcsRootInstancesOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVcsRootInstancesOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getVcsRootInstancesOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcsRootInstances",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetVcsRootInstancesOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVcsRootInstancesOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getVcsRootInstancesOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetZippedFileOfBuildType gets specific file zipped
*/
func (a *Client) GetZippedFileOfBuildType(params *GetZippedFileOfBuildTypeParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetZippedFileOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getZippedFileOfBuildType",
		Method:             "GET",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs/files/latest/archived{path}",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetZippedFileOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  RemoveAllTemplates detaches all templates from the matching build configuration
*/
func (a *Client) RemoveAllTemplates(params *RemoveAllTemplatesParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAllTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeAllTemplates",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveAllTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  RemoveTemplate detaches a template from the matching build configuration
*/
func (a *Client) RemoveTemplate(params *RemoveTemplateParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTemplate",
		Method:             "DELETE",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates/{templateLocator}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  ReplaceAgentRequirement updates an agent requirement of the matching build configuration
*/
func (a *Client) ReplaceAgentRequirement(params *ReplaceAgentRequirementParams, opts ...ClientOption) (*ReplaceAgentRequirementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAgentRequirementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAgentRequirement",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAgentRequirementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAgentRequirementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAgentRequirement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAllAgentRequirements updates all agent requirements of the matching build configuration
*/
func (a *Client) ReplaceAllAgentRequirements(params *ReplaceAllAgentRequirementsParams, opts ...ClientOption) (*ReplaceAllAgentRequirementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllAgentRequirementsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAllAgentRequirements",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllAgentRequirementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllAgentRequirementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAllAgentRequirements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAllArtifactDependencies updates all artifact dependencies of the matching build configuration
*/
func (a *Client) ReplaceAllArtifactDependencies(params *ReplaceAllArtifactDependenciesParams, opts ...ClientOption) (*ReplaceAllArtifactDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllArtifactDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAllArtifactDependencies",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllArtifactDependenciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllArtifactDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAllArtifactDependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAllBuildFeatures updates all build features of the matching build configuration
*/
func (a *Client) ReplaceAllBuildFeatures(params *ReplaceAllBuildFeaturesParams, opts ...ClientOption) (*ReplaceAllBuildFeaturesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllBuildFeaturesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAllBuildFeatures",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllBuildFeaturesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllBuildFeaturesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAllBuildFeatures: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAllBuildSteps updates all build steps of the matching build configuration
*/
func (a *Client) ReplaceAllBuildSteps(params *ReplaceAllBuildStepsParams, opts ...ClientOption) (*ReplaceAllBuildStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllBuildStepsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAllBuildSteps",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllBuildStepsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllBuildStepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAllBuildSteps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAllSnapshotDependencies updates all snapshot dependencies of the matching build configuration
*/
func (a *Client) ReplaceAllSnapshotDependencies(params *ReplaceAllSnapshotDependenciesParams, opts ...ClientOption) (*ReplaceAllSnapshotDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllSnapshotDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAllSnapshotDependencies",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllSnapshotDependenciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllSnapshotDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAllSnapshotDependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAllTriggers updates all triggers of the matching build configuration
*/
func (a *Client) ReplaceAllTriggers(params *ReplaceAllTriggersParams, opts ...ClientOption) (*ReplaceAllTriggersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllTriggersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAllTriggers",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllTriggersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllTriggersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAllTriggers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceAllVcsRoots updates all v c s roots of the matching build configuration
*/
func (a *Client) ReplaceAllVcsRoots(params *ReplaceAllVcsRootsParams, opts ...ClientOption) (*ReplaceAllVcsRootsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceAllVcsRootsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceAllVcsRoots",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceAllVcsRootsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceAllVcsRootsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceAllVcsRoots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceArtifactDependency updates an artifact dependency of the matching build configuration
*/
func (a *Client) ReplaceArtifactDependency(params *ReplaceArtifactDependencyParams, opts ...ClientOption) (*ReplaceArtifactDependencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceArtifactDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceArtifactDependency",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceArtifactDependencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceArtifactDependencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceArtifactDependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceBuildFeature updates a build feature of the matching build configuration
*/
func (a *Client) ReplaceBuildFeature(params *ReplaceBuildFeatureParams, opts ...ClientOption) (*ReplaceBuildFeatureOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceBuildFeatureParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceBuildFeature",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceBuildFeatureReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceBuildFeatureOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceBuildFeature: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceBuildFeatureParameters updates a parameter of a build feature of the matching build configuration
*/
func (a *Client) ReplaceBuildFeatureParameters(params *ReplaceBuildFeatureParametersParams, opts ...ClientOption) (*ReplaceBuildFeatureParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceBuildFeatureParametersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceBuildFeatureParameters",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceBuildFeatureParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceBuildFeatureParametersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceBuildFeatureParameters: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceBuildStep replaces a build step of the matching build configuration
*/
func (a *Client) ReplaceBuildStep(params *ReplaceBuildStepParams, opts ...ClientOption) (*ReplaceBuildStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceBuildStepParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceBuildStep",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceBuildStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceBuildStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceBuildStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceSnapshotDependency updates a snapshot dependency of the matching build configuration
*/
func (a *Client) ReplaceSnapshotDependency(params *ReplaceSnapshotDependencyParams, opts ...ClientOption) (*ReplaceSnapshotDependencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceSnapshotDependencyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceSnapshotDependency",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/snapshot-dependencies/{snapshotDepLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceSnapshotDependencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceSnapshotDependencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceSnapshotDependency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceTrigger updates a trigger of the matching build configuration
*/
func (a *Client) ReplaceTrigger(params *ReplaceTriggerParams, opts ...ClientOption) (*ReplaceTriggerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceTriggerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceTrigger",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceTriggerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceTriggerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceTrigger: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetAgentRequirementParameter updates a parameter of an agent requirement of the matching build configuration
*/
func (a *Client) SetAgentRequirementParameter(params *SetAgentRequirementParameterParams, opts ...ClientOption) (*SetAgentRequirementParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAgentRequirementParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAgentRequirementParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/agent-requirements/{agentRequirementLocator}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetAgentRequirementParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAgentRequirementParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAgentRequirementParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetArtifactDependencyParameter updates a parameter of an artifact dependency of the matching build configuration
*/
func (a *Client) SetArtifactDependencyParameter(params *SetArtifactDependencyParameterParams, opts ...ClientOption) (*SetArtifactDependencyParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetArtifactDependencyParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setArtifactDependencyParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/artifact-dependencies/{artifactDepLocator}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetArtifactDependencyParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetArtifactDependencyParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setArtifactDependencyParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildFeatureParameter updates a parameter of a build feature of the matching build configuration
*/
func (a *Client) SetBuildFeatureParameter(params *SetBuildFeatureParameterParams, opts ...ClientOption) (*SetBuildFeatureParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildFeatureParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildFeatureParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/features/{featureId}/{name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildFeatureParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildFeatureParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildFeatureParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildStepParameter updates a parameter of a build step of the matching build configuration
*/
func (a *Client) SetBuildStepParameter(params *SetBuildStepParameterParams, opts ...ClientOption) (*SetBuildStepParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildStepParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildStepParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/steps/{stepId}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildStepParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildStepParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildStepParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildTypeField updates a field of the matching build configuration
*/
func (a *Client) SetBuildTypeField(params *SetBuildTypeFieldParams, opts ...ClientOption) (*SetBuildTypeFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildTypeFieldParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildTypeField",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/{field}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildTypeFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildTypeFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildTypeField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetBuildTypeTemplates updates all templates of the matching build configuration
*/
func (a *Client) SetBuildTypeTemplates(params *SetBuildTypeTemplatesParams, opts ...ClientOption) (*SetBuildTypeTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBuildTypeTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setBuildTypeTemplates",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/templates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBuildTypeTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBuildTypeTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBuildTypeTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetTriggerParameter updates a parameter of a trigger of the matching build configuration
*/
func (a *Client) SetTriggerParameter(params *SetTriggerParameterParams, opts ...ClientOption) (*SetTriggerParameterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetTriggerParameterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setTriggerParameter",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/triggers/{triggerLocator}/{fieldName}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetTriggerParameterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetTriggerParameterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setTriggerParameter: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameterOfBuildType updates build parameter
*/
func (a *Client) UpdateBuildParameterOfBuildType(params *UpdateBuildParameterOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameterOfBuildType",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameterOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameterSpecificationOfBuildType updates build parameter specification
*/
func (a *Client) UpdateBuildParameterSpecificationOfBuildType(params *UpdateBuildParameterSpecificationOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterSpecificationOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterSpecificationOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameterSpecificationOfBuildType",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type/rawValue",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterSpecificationOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterSpecificationOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameterSpecificationOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameterTypeOfBuildType updates type of build parameter
*/
func (a *Client) UpdateBuildParameterTypeOfBuildType(params *UpdateBuildParameterTypeOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterTypeOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterTypeOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameterTypeOfBuildType",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}/type",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterTypeOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterTypeOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameterTypeOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParameterValueOfBuildType updates value of build parameter
*/
func (a *Client) UpdateBuildParameterValueOfBuildType(params *UpdateBuildParameterValueOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParameterValueOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParameterValueOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParameterValueOfBuildType",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters/{name}/value",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParameterValueOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParameterValueOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParameterValueOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildParametersOfBuildType updates build parameters
*/
func (a *Client) UpdateBuildParametersOfBuildType(params *UpdateBuildParametersOfBuildTypeParams, opts ...ClientOption) (*UpdateBuildParametersOfBuildTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildParametersOfBuildTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildParametersOfBuildType",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/parameters",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildParametersOfBuildTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildParametersOfBuildTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildParametersOfBuildType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildTypeVcsRoot updates a v c s root of the matching build configuration
*/
func (a *Client) UpdateBuildTypeVcsRoot(params *UpdateBuildTypeVcsRootParams, opts ...ClientOption) (*UpdateBuildTypeVcsRootOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildTypeVcsRootParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildTypeVcsRoot",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json", "application/xml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildTypeVcsRootReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildTypeVcsRootOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildTypeVcsRoot: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateBuildTypeVcsRootCheckoutRules updates checkout rules of a v c s root of the matching build configuration
*/
func (a *Client) UpdateBuildTypeVcsRootCheckoutRules(params *UpdateBuildTypeVcsRootCheckoutRulesParams, opts ...ClientOption) (*UpdateBuildTypeVcsRootCheckoutRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuildTypeVcsRootCheckoutRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBuildTypeVcsRootCheckoutRules",
		Method:             "PUT",
		PathPattern:        "/app/rest/buildTypes/{btLocator}/vcs-root-entries/{vcsRootLocator}/checkout-rules",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateBuildTypeVcsRootCheckoutRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuildTypeVcsRootCheckoutRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateBuildTypeVcsRootCheckoutRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
