// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetZippedFileOfServerParams creates a new GetZippedFileOfServerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetZippedFileOfServerParams() *GetZippedFileOfServerParams {
	return &GetZippedFileOfServerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetZippedFileOfServerParamsWithTimeout creates a new GetZippedFileOfServerParams object
// with the ability to set a timeout on a request.
func NewGetZippedFileOfServerParamsWithTimeout(timeout time.Duration) *GetZippedFileOfServerParams {
	return &GetZippedFileOfServerParams{
		timeout: timeout,
	}
}

// NewGetZippedFileOfServerParamsWithContext creates a new GetZippedFileOfServerParams object
// with the ability to set a context for a request.
func NewGetZippedFileOfServerParamsWithContext(ctx context.Context) *GetZippedFileOfServerParams {
	return &GetZippedFileOfServerParams{
		Context: ctx,
	}
}

// NewGetZippedFileOfServerParamsWithHTTPClient creates a new GetZippedFileOfServerParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetZippedFileOfServerParamsWithHTTPClient(client *http.Client) *GetZippedFileOfServerParams {
	return &GetZippedFileOfServerParams{
		HTTPClient: client,
	}
}

/* GetZippedFileOfServerParams contains all the parameters to send to the API endpoint
   for the get zipped file of server operation.

   Typically these are written to a http.Request.
*/
type GetZippedFileOfServerParams struct {

	// AreaID.
	AreaID string

	// BasePath.
	BasePath *string

	// Locator.
	Locator *string

	// Name.
	Name *string

	// Path.
	Path string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get zipped file of server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetZippedFileOfServerParams) WithDefaults() *GetZippedFileOfServerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get zipped file of server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetZippedFileOfServerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithTimeout(timeout time.Duration) *GetZippedFileOfServerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithContext(ctx context.Context) *GetZippedFileOfServerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithHTTPClient(client *http.Client) *GetZippedFileOfServerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAreaID adds the areaID to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithAreaID(areaID string) *GetZippedFileOfServerParams {
	o.SetAreaID(areaID)
	return o
}

// SetAreaID adds the areaId to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetAreaID(areaID string) {
	o.AreaID = areaID
}

// WithBasePath adds the basePath to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithBasePath(basePath *string) *GetZippedFileOfServerParams {
	o.SetBasePath(basePath)
	return o
}

// SetBasePath adds the basePath to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetBasePath(basePath *string) {
	o.BasePath = basePath
}

// WithLocator adds the locator to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithLocator(locator *string) *GetZippedFileOfServerParams {
	o.SetLocator(locator)
	return o
}

// SetLocator adds the locator to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetLocator(locator *string) {
	o.Locator = locator
}

// WithName adds the name to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithName(name *string) *GetZippedFileOfServerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetName(name *string) {
	o.Name = name
}

// WithPath adds the path to the get zipped file of server params
func (o *GetZippedFileOfServerParams) WithPath(path string) *GetZippedFileOfServerParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get zipped file of server params
func (o *GetZippedFileOfServerParams) SetPath(path string) {
	o.Path = path
}

// WriteToRequest writes these params to a swagger request
func (o *GetZippedFileOfServerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param areaId
	if err := r.SetPathParam("areaId", o.AreaID); err != nil {
		return err
	}

	if o.BasePath != nil {

		// query param basePath
		var qrBasePath string

		if o.BasePath != nil {
			qrBasePath = *o.BasePath
		}
		qBasePath := qrBasePath
		if qBasePath != "" {

			if err := r.SetQueryParam("basePath", qBasePath); err != nil {
				return err
			}
		}
	}

	if o.Locator != nil {

		// query param locator
		var qrLocator string

		if o.Locator != nil {
			qrLocator = *o.Locator
		}
		qLocator := qrLocator
		if qLocator != "" {

			if err := r.SetQueryParam("locator", qLocator); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	// path param path
	if err := r.SetPathParam("path", o.Path); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
