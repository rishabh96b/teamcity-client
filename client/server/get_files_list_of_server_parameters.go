// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetFilesListOfServerParams creates a new GetFilesListOfServerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetFilesListOfServerParams() *GetFilesListOfServerParams {
	return &GetFilesListOfServerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetFilesListOfServerParamsWithTimeout creates a new GetFilesListOfServerParams object
// with the ability to set a timeout on a request.
func NewGetFilesListOfServerParamsWithTimeout(timeout time.Duration) *GetFilesListOfServerParams {
	return &GetFilesListOfServerParams{
		timeout: timeout,
	}
}

// NewGetFilesListOfServerParamsWithContext creates a new GetFilesListOfServerParams object
// with the ability to set a context for a request.
func NewGetFilesListOfServerParamsWithContext(ctx context.Context) *GetFilesListOfServerParams {
	return &GetFilesListOfServerParams{
		Context: ctx,
	}
}

// NewGetFilesListOfServerParamsWithHTTPClient creates a new GetFilesListOfServerParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetFilesListOfServerParamsWithHTTPClient(client *http.Client) *GetFilesListOfServerParams {
	return &GetFilesListOfServerParams{
		HTTPClient: client,
	}
}

/* GetFilesListOfServerParams contains all the parameters to send to the API endpoint
   for the get files list of server operation.

   Typically these are written to a http.Request.
*/
type GetFilesListOfServerParams struct {

	// AreaID.
	AreaID string

	// BasePath.
	BasePath *string

	// Fields.
	Fields *string

	// Locator.
	Locator *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get files list of server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilesListOfServerParams) WithDefaults() *GetFilesListOfServerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get files list of server params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetFilesListOfServerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get files list of server params
func (o *GetFilesListOfServerParams) WithTimeout(timeout time.Duration) *GetFilesListOfServerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get files list of server params
func (o *GetFilesListOfServerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get files list of server params
func (o *GetFilesListOfServerParams) WithContext(ctx context.Context) *GetFilesListOfServerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get files list of server params
func (o *GetFilesListOfServerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get files list of server params
func (o *GetFilesListOfServerParams) WithHTTPClient(client *http.Client) *GetFilesListOfServerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get files list of server params
func (o *GetFilesListOfServerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAreaID adds the areaID to the get files list of server params
func (o *GetFilesListOfServerParams) WithAreaID(areaID string) *GetFilesListOfServerParams {
	o.SetAreaID(areaID)
	return o
}

// SetAreaID adds the areaId to the get files list of server params
func (o *GetFilesListOfServerParams) SetAreaID(areaID string) {
	o.AreaID = areaID
}

// WithBasePath adds the basePath to the get files list of server params
func (o *GetFilesListOfServerParams) WithBasePath(basePath *string) *GetFilesListOfServerParams {
	o.SetBasePath(basePath)
	return o
}

// SetBasePath adds the basePath to the get files list of server params
func (o *GetFilesListOfServerParams) SetBasePath(basePath *string) {
	o.BasePath = basePath
}

// WithFields adds the fields to the get files list of server params
func (o *GetFilesListOfServerParams) WithFields(fields *string) *GetFilesListOfServerParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get files list of server params
func (o *GetFilesListOfServerParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLocator adds the locator to the get files list of server params
func (o *GetFilesListOfServerParams) WithLocator(locator *string) *GetFilesListOfServerParams {
	o.SetLocator(locator)
	return o
}

// SetLocator adds the locator to the get files list of server params
func (o *GetFilesListOfServerParams) SetLocator(locator *string) {
	o.Locator = locator
}

// WriteToRequest writes these params to a swagger request
func (o *GetFilesListOfServerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param areaId
	if err := r.SetPathParam("areaId", o.AreaID); err != nil {
		return err
	}

	if o.BasePath != nil {

		// query param basePath
		var qrBasePath string

		if o.BasePath != nil {
			qrBasePath = *o.BasePath
		}
		qBasePath := qrBasePath
		if qBasePath != "" {

			if err := r.SetQueryParam("basePath", qBasePath); err != nil {
				return err
			}
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	if o.Locator != nil {

		// query param locator
		var qrLocator string

		if o.Locator != nil {
			qrLocator = *o.Locator
		}
		qLocator := qrLocator
		if qLocator != "" {

			if err := r.SetQueryParam("locator", qLocator); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
