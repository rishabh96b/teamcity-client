// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Build Represents a build instance.
//
// swagger:model build
type Build struct {

	// agent
	Agent *Agent `json:"agent,omitempty"`

	// artifact dependencies
	ArtifactDependencies *Builds `json:"artifact-dependencies,omitempty"`

	// artifact dependency changes
	ArtifactDependencyChanges *BuildChanges `json:"artifactDependencyChanges,omitempty"`

	// artifacts
	Artifacts *Files `json:"artifacts,omitempty"`

	// artifacts directory
	ArtifactsDirectory string `json:"artifactsDirectory,omitempty" xml:"artifactsDirectory,attr,omitempty"`

	// attributes
	Attributes *Entries `json:"attributes,omitempty"`

	// branch name
	BranchName string `json:"branchName,omitempty" xml:"branchName,attr,omitempty"`

	// build type
	BuildType *BuildType `json:"buildType,omitempty"`

	// build type Id
	BuildTypeID string `json:"buildTypeId,omitempty" xml:"buildTypeId,attr,omitempty"`

	// build type internal Id
	BuildTypeInternalID string `json:"buildTypeInternalId,omitempty" xml:"buildTypeInternalId,attr,omitempty"`

	// canceled info
	CanceledInfo *Comment `json:"canceledInfo,omitempty"`

	// chain modification Id
	ChainModificationID string `json:"chainModificationId,omitempty"`

	// changes
	Changes *Changes `json:"changes,omitempty"`

	// comment
	Comment *Comment `json:"comment,omitempty"`

	// compatible agents
	CompatibleAgents *Agents `json:"compatibleAgents,omitempty"`

	// composite
	Composite bool `json:"composite,omitempty" xml:"composite,attr,omitempty"`

	// current settings hash
	CurrentSettingsHash string `json:"currentSettingsHash,omitempty"`

	// custom artifact dependencies
	CustomArtifactDependencies *ArtifactDependencies `json:"custom-artifact-dependencies,omitempty"`

	// customization
	Customization *Customizations `json:"customization,omitempty"`

	// customized
	Customized bool `json:"customized,omitempty" xml:"customized,attr,omitempty"`

	// default branch
	DefaultBranch bool `json:"defaultBranch,omitempty" xml:"defaultBranch,attr,omitempty"`

	// detached from agent
	DetachedFromAgent bool `json:"detachedFromAgent,omitempty" xml:"detachedFromAgent,attr,omitempty"`

	// failed to start
	FailedToStart bool `json:"failedToStart,omitempty" xml:"failedToStart,attr,omitempty"`

	// finish date
	FinishDate string `json:"finishDate,omitempty"`

	// finish estimate
	FinishEstimate string `json:"finishEstimate,omitempty"`

	// finish on agent date
	FinishOnAgentDate string `json:"finishOnAgentDate,omitempty"`

	// history
	History bool `json:"history,omitempty" xml:"history,attr,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID int64 `json:"id,omitempty" xml:"id,attr,omitempty"`

	// last changes
	LastChanges *Changes `json:"lastChanges,omitempty"`

	// limited changes count
	LimitedChangesCount int32 `json:"limitedChangesCount,omitempty" xml:"limitedChangesCount,attr,omitempty"`

	// links
	Links *Links `json:"links,omitempty"`

	// locator
	Locator string `json:"locator,omitempty" xml:"locator,attr,omitempty"`

	// metadata
	Metadata *Datas `json:"metadata,omitempty"`

	// modification Id
	ModificationID string `json:"modificationId,omitempty"`

	// number
	Number string `json:"number,omitempty" xml:"number,attr,omitempty"`

	// percentage complete
	PercentageComplete int32 `json:"percentageComplete,omitempty" xml:"percentageComplete,attr,omitempty"`

	// personal
	Personal bool `json:"personal,omitempty" xml:"personal,attr,omitempty"`

	// pin info
	PinInfo *Comment `json:"pinInfo,omitempty"`

	// pinned
	Pinned bool `json:"pinned,omitempty" xml:"pinned,attr,omitempty"`

	// problem occurrences
	ProblemOccurrences *ProblemOccurrences `json:"problemOccurrences,omitempty"`

	// properties
	Properties *Properties `json:"properties,omitempty"`

	// queue position
	QueuePosition int32 `json:"queuePosition,omitempty" xml:"queuePosition,attr,omitempty"`

	// queued date
	QueuedDate string `json:"queuedDate,omitempty"`

	// related
	Related *Related `json:"related,omitempty"`

	// related issues
	RelatedIssues *IssuesUsages `json:"relatedIssues,omitempty"`

	// replacement ids
	ReplacementIds *Items `json:"replacementIds,omitempty"`

	// resulting properties
	ResultingProperties *Properties `json:"resultingProperties,omitempty"`

	// revisions
	Revisions *Revisions `json:"revisions,omitempty"`

	// running
	Running bool `json:"running,omitempty" xml:"running,attr,omitempty"`

	// running info
	RunningInfo *ProgressInfo `json:"running-info,omitempty"`

	// settings hash
	SettingsHash string `json:"settingsHash,omitempty"`

	// snapshot dependencies
	SnapshotDependencies *Builds `json:"snapshot-dependencies,omitempty"`

	// start date
	StartDate string `json:"startDate,omitempty"`

	// start estimate
	StartEstimate string `json:"startEstimate,omitempty"`

	// state
	State string `json:"state,omitempty" xml:"state,attr,omitempty"`

	// statistics
	Statistics *Properties `json:"statistics,omitempty"`

	// status
	Status string `json:"status,omitempty" xml:"status,attr,omitempty"`

	// status change comment
	StatusChangeComment *Comment `json:"statusChangeComment,omitempty"`

	// status text
	StatusText string `json:"statusText,omitempty"`

	// tags
	Tags *Tags `json:"tags,omitempty"`

	// task Id
	TaskID int64 `json:"taskId,omitempty" xml:"taskId,attr,omitempty"`

	// test occurrences
	TestOccurrences *TestOccurrences `json:"testOccurrences,omitempty"`

	// triggered
	Triggered *TriggeredBy `json:"triggered,omitempty"`

	// triggering options
	TriggeringOptions *BuildTriggeringOptions `json:"triggeringOptions,omitempty"`

	// unspecified branch
	UnspecifiedBranch bool `json:"unspecifiedBranch,omitempty" xml:"unspecifiedBranch,attr,omitempty"`

	// used by other builds
	UsedByOtherBuilds bool `json:"usedByOtherBuilds,omitempty" xml:"usedByOtherBuilds,attr,omitempty"`

	// user
	User *User `json:"user,omitempty"`

	// vcs labels
	VcsLabels []*VcsLabel `json:"vcsLabels"`

	// versioned settings revision
	VersionedSettingsRevision *Revision `json:"versionedSettingsRevision,omitempty"`

	// wait reason
	WaitReason string `json:"waitReason,omitempty"`

	// web Url
	WebURL string `json:"webUrl,omitempty" xml:"webUrl,attr,omitempty"`
}

// Validate validates this build
func (m *Build) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifactDependencyChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanceledInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompatibleAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomArtifactDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastChanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePinInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemOccurrences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplacementIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultingProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevisions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusChangeComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestOccurrences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggeringOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionedSettingsRevision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) validateAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateArtifactDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactDependencies) { // not required
		return nil
	}

	if m.ArtifactDependencies != nil {
		if err := m.ArtifactDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact-dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifact-dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateArtifactDependencyChanges(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactDependencyChanges) { // not required
		return nil
	}

	if m.ArtifactDependencyChanges != nil {
		if err := m.ArtifactDependencyChanges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactDependencyChanges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactDependencyChanges")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateArtifacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Artifacts) { // not required
		return nil
	}

	if m.Artifacts != nil {
		if err := m.Artifacts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifacts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifacts")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateBuildType(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildType) { // not required
		return nil
	}

	if m.BuildType != nil {
		if err := m.BuildType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildType")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateCanceledInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.CanceledInfo) { // not required
		return nil
	}

	if m.CanceledInfo != nil {
		if err := m.CanceledInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canceledInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canceledInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateChanges(formats strfmt.Registry) error {
	if swag.IsZero(m.Changes) { // not required
		return nil
	}

	if m.Changes != nil {
		if err := m.Changes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changes")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateComment(formats strfmt.Registry) error {
	if swag.IsZero(m.Comment) { // not required
		return nil
	}

	if m.Comment != nil {
		if err := m.Comment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("comment")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateCompatibleAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.CompatibleAgents) { // not required
		return nil
	}

	if m.CompatibleAgents != nil {
		if err := m.CompatibleAgents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibleAgents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibleAgents")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateCustomArtifactDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomArtifactDependencies) { // not required
		return nil
	}

	if m.CustomArtifactDependencies != nil {
		if err := m.CustomArtifactDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom-artifact-dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom-artifact-dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateCustomization(formats strfmt.Registry) error {
	if swag.IsZero(m.Customization) { // not required
		return nil
	}

	if m.Customization != nil {
		if err := m.Customization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customization")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateLastChanges(formats strfmt.Registry) error {
	if swag.IsZero(m.LastChanges) { // not required
		return nil
	}

	if m.LastChanges != nil {
		if err := m.LastChanges.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastChanges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastChanges")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validatePinInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PinInfo) { // not required
		return nil
	}

	if m.PinInfo != nil {
		if err := m.PinInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pinInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pinInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateProblemOccurrences(formats strfmt.Registry) error {
	if swag.IsZero(m.ProblemOccurrences) { // not required
		return nil
	}

	if m.ProblemOccurrences != nil {
		if err := m.ProblemOccurrences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("problemOccurrences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("problemOccurrences")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateRelated(formats strfmt.Registry) error {
	if swag.IsZero(m.Related) { // not required
		return nil
	}

	if m.Related != nil {
		if err := m.Related.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("related")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("related")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateRelatedIssues(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedIssues) { // not required
		return nil
	}

	if m.RelatedIssues != nil {
		if err := m.RelatedIssues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedIssues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedIssues")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateReplacementIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplacementIds) { // not required
		return nil
	}

	if m.ReplacementIds != nil {
		if err := m.ReplacementIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replacementIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replacementIds")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateResultingProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.ResultingProperties) { // not required
		return nil
	}

	if m.ResultingProperties != nil {
		if err := m.ResultingProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resultingProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resultingProperties")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateRevisions(formats strfmt.Registry) error {
	if swag.IsZero(m.Revisions) { // not required
		return nil
	}

	if m.Revisions != nil {
		if err := m.Revisions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revisions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revisions")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateRunningInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.RunningInfo) { // not required
		return nil
	}

	if m.RunningInfo != nil {
		if err := m.RunningInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("running-info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("running-info")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateSnapshotDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.SnapshotDependencies) { // not required
		return nil
	}

	if m.SnapshotDependencies != nil {
		if err := m.SnapshotDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot-dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot-dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateStatistics(formats strfmt.Registry) error {
	if swag.IsZero(m.Statistics) { // not required
		return nil
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateStatusChangeComment(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusChangeComment) { // not required
		return nil
	}

	if m.StatusChangeComment != nil {
		if err := m.StatusChangeComment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusChangeComment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusChangeComment")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateTestOccurrences(formats strfmt.Registry) error {
	if swag.IsZero(m.TestOccurrences) { // not required
		return nil
	}

	if m.TestOccurrences != nil {
		if err := m.TestOccurrences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testOccurrences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("testOccurrences")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateTriggered(formats strfmt.Registry) error {
	if swag.IsZero(m.Triggered) { // not required
		return nil
	}

	if m.Triggered != nil {
		if err := m.Triggered.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggered")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggered")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateTriggeringOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggeringOptions) { // not required
		return nil
	}

	if m.TriggeringOptions != nil {
		if err := m.TriggeringOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggeringOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggeringOptions")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *Build) validateVcsLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.VcsLabels); i++ {
		if swag.IsZero(m.VcsLabels[i]) { // not required
			continue
		}

		if m.VcsLabels[i] != nil {
			if err := m.VcsLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vcsLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vcsLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Build) validateVersionedSettingsRevision(formats strfmt.Registry) error {
	if swag.IsZero(m.VersionedSettingsRevision) { // not required
		return nil
	}

	if m.VersionedSettingsRevision != nil {
		if err := m.VersionedSettingsRevision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionedSettingsRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionedSettingsRevision")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this build based on the context it is used
func (m *Build) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArtifactDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArtifactDependencyChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCanceledInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompatibleAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomArtifactDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastChanges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePinInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProblemOccurrences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedIssues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplacementIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResultingProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevisions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunningInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatistics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusChangeComment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTestOccurrences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggered(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggeringOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcsLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersionedSettingsRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) contextValidateAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.Agent != nil {
		if err := m.Agent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateArtifactDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.ArtifactDependencies != nil {
		if err := m.ArtifactDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact-dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifact-dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateArtifactDependencyChanges(ctx context.Context, formats strfmt.Registry) error {

	if m.ArtifactDependencyChanges != nil {
		if err := m.ArtifactDependencyChanges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifactDependencyChanges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifactDependencyChanges")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateArtifacts(ctx context.Context, formats strfmt.Registry) error {

	if m.Artifacts != nil {
		if err := m.Artifacts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifacts")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("artifacts")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.Attributes != nil {
		if err := m.Attributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateBuildType(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildType != nil {
		if err := m.BuildType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildType")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateCanceledInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.CanceledInfo != nil {
		if err := m.CanceledInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canceledInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canceledInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateChanges(ctx context.Context, formats strfmt.Registry) error {

	if m.Changes != nil {
		if err := m.Changes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("changes")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateComment(ctx context.Context, formats strfmt.Registry) error {

	if m.Comment != nil {
		if err := m.Comment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("comment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("comment")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateCompatibleAgents(ctx context.Context, formats strfmt.Registry) error {

	if m.CompatibleAgents != nil {
		if err := m.CompatibleAgents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibleAgents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibleAgents")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateCustomArtifactDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomArtifactDependencies != nil {
		if err := m.CustomArtifactDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("custom-artifact-dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("custom-artifact-dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateCustomization(ctx context.Context, formats strfmt.Registry) error {

	if m.Customization != nil {
		if err := m.Customization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("customization")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateLastChanges(ctx context.Context, formats strfmt.Registry) error {

	if m.LastChanges != nil {
		if err := m.LastChanges.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastChanges")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastChanges")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidatePinInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PinInfo != nil {
		if err := m.PinInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pinInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pinInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateProblemOccurrences(ctx context.Context, formats strfmt.Registry) error {

	if m.ProblemOccurrences != nil {
		if err := m.ProblemOccurrences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("problemOccurrences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("problemOccurrences")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {
		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateRelated(ctx context.Context, formats strfmt.Registry) error {

	if m.Related != nil {
		if err := m.Related.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("related")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("related")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateRelatedIssues(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedIssues != nil {
		if err := m.RelatedIssues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedIssues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedIssues")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateReplacementIds(ctx context.Context, formats strfmt.Registry) error {

	if m.ReplacementIds != nil {
		if err := m.ReplacementIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replacementIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("replacementIds")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateResultingProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.ResultingProperties != nil {
		if err := m.ResultingProperties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resultingProperties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resultingProperties")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateRevisions(ctx context.Context, formats strfmt.Registry) error {

	if m.Revisions != nil {
		if err := m.Revisions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revisions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revisions")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateRunningInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.RunningInfo != nil {
		if err := m.RunningInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("running-info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("running-info")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateSnapshotDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotDependencies != nil {
		if err := m.SnapshotDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshot-dependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshot-dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateStatistics(ctx context.Context, formats strfmt.Registry) error {

	if m.Statistics != nil {
		if err := m.Statistics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateStatusChangeComment(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusChangeComment != nil {
		if err := m.StatusChangeComment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusChangeComment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusChangeComment")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags != nil {
		if err := m.Tags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateTestOccurrences(ctx context.Context, formats strfmt.Registry) error {

	if m.TestOccurrences != nil {
		if err := m.TestOccurrences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testOccurrences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("testOccurrences")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateTriggered(ctx context.Context, formats strfmt.Registry) error {

	if m.Triggered != nil {
		if err := m.Triggered.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggered")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggered")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateTriggeringOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.TriggeringOptions != nil {
		if err := m.TriggeringOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggeringOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggeringOptions")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *Build) contextValidateVcsLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VcsLabels); i++ {

		if m.VcsLabels[i] != nil {
			if err := m.VcsLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vcsLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("vcsLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Build) contextValidateVersionedSettingsRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.VersionedSettingsRevision != nil {
		if err := m.VersionedSettingsRevision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("versionedSettingsRevision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("versionedSettingsRevision")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Build) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Build) UnmarshalBinary(b []byte) error {
	var res Build
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
