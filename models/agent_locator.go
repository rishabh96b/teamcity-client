// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AgentLocator Represents a locator string for filtering Agent entities.
//
// swagger:model AgentLocator
type AgentLocator struct {

	// Is the agent authorized.
	Authorized bool `json:"authorized,omitempty"`

	// Build locator.
	Build string `json:"build,omitempty"`

	// Compatible build types locator.
	Compatible string `json:"compatible,omitempty"`

	// Is the agent connected.
	Connected bool `json:"connected,omitempty"`

	// For paginated calls, how many entities to return per page.
	Count int32 `json:"count,omitempty"`

	// Is the agent enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Entity ID.
	ID int32 `json:"id,omitempty"`

	// ip
	IP string `json:"ip,omitempty"`

	// Supply multiple locators and return a union of the results.
	Item string `json:"item,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameter
	Parameter string `json:"parameter,omitempty"`

	// Agent pool locator.
	Pool string `json:"pool,omitempty"`

	// For paginated calls, from which entity to start rendering the page.
	Start int32 `json:"start,omitempty"`
}

// Validate validates this agent locator
func (m *AgentLocator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this agent locator based on context it is used
func (m *AgentLocator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AgentLocator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentLocator) UnmarshalBinary(b []byte) error {
	var res AgentLocator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
