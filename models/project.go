// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Project Represents a project.
//
// swagger:model project
type Project struct {

	// archived
	Archived bool `json:"archived,omitempty" xml:"archived,attr,omitempty"`

	// build types
	BuildTypes *BuildTypes `json:"buildTypes,omitempty"`

	// cloud profiles
	CloudProfiles *CloudProfiles `json:"cloudProfiles,omitempty"`

	// default template
	DefaultTemplate *BuildType `json:"defaultTemplate,omitempty"`

	// description
	Description string `json:"description,omitempty" xml:"description,attr,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// internal Id
	InternalID string `json:"internalId,omitempty" xml:"internalId,attr,omitempty"`

	// links
	Links *Links `json:"links,omitempty"`

	// locator
	Locator string `json:"locator,omitempty" xml:"locator,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// parameters
	Parameters *Properties `json:"parameters,omitempty"`

	// parent project
	ParentProject *Project `json:"parentProject,omitempty"`

	// parent project Id
	ParentProjectID string `json:"parentProjectId,omitempty" xml:"parentProjectId,attr,omitempty"`

	// parent project internal Id
	ParentProjectInternalID string `json:"parentProjectInternalId,omitempty" xml:"parentProjectInternalId,attr,omitempty"`

	// parent project name
	ParentProjectName string `json:"parentProjectName,omitempty" xml:"parentProjectName,attr,omitempty"`

	// project features
	ProjectFeatures *ProjectFeatures `json:"projectFeatures,omitempty"`

	// projects
	Projects *Projects `json:"projects,omitempty"`

	// read only UI
	ReadOnlyUI *StateField `json:"readOnlyUI,omitempty"`

	// templates
	Templates *BuildTypes `json:"templates,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty" xml:"uuid,attr,omitempty"`

	// vcs roots
	VcsRoots *VcsRoots `json:"vcsRoots,omitempty"`

	// web Url
	WebURL string `json:"webUrl,omitempty" xml:"webUrl,attr,omitempty"`
}

// Validate validates this project
func (m *Project) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadOnlyUI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsRoots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) validateBuildTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildTypes) { // not required
		return nil
	}

	if m.BuildTypes != nil {
		if err := m.BuildTypes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildTypes")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateCloudProfiles(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudProfiles) { // not required
		return nil
	}

	if m.CloudProfiles != nil {
		if err := m.CloudProfiles.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateDefaultTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultTemplate) { // not required
		return nil
	}

	if m.DefaultTemplate != nil {
		if err := m.DefaultTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateParentProject(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentProject) { // not required
		return nil
	}

	if m.ParentProject != nil {
		if err := m.ParentProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentProject")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateProjectFeatures(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectFeatures) { // not required
		return nil
	}

	if m.ProjectFeatures != nil {
		if err := m.ProjectFeatures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectFeatures")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectFeatures")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if m.Projects != nil {
		if err := m.Projects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateReadOnlyUI(formats strfmt.Registry) error {
	if swag.IsZero(m.ReadOnlyUI) { // not required
		return nil
	}

	if m.ReadOnlyUI != nil {
		if err := m.ReadOnlyUI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readOnlyUI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readOnlyUI")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.Templates) { // not required
		return nil
	}

	if m.Templates != nil {
		if err := m.Templates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templates")
			}
			return err
		}
	}

	return nil
}

func (m *Project) validateVcsRoots(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsRoots) { // not required
		return nil
	}

	if m.VcsRoots != nil {
		if err := m.VcsRoots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRoots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcsRoots")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project based on the context it is used
func (m *Project) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudProfiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectFeatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReadOnlyUI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcsRoots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Project) contextValidateBuildTypes(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildTypes != nil {
		if err := m.BuildTypes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildTypes")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateCloudProfiles(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudProfiles != nil {
		if err := m.CloudProfiles.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudProfiles")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudProfiles")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateDefaultTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultTemplate != nil {
		if err := m.DefaultTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultTemplate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultTemplate")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {
		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateParentProject(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentProject != nil {
		if err := m.ParentProject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentProject")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateProjectFeatures(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectFeatures != nil {
		if err := m.ProjectFeatures.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectFeatures")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectFeatures")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	if m.Projects != nil {
		if err := m.Projects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateReadOnlyUI(ctx context.Context, formats strfmt.Registry) error {

	if m.ReadOnlyUI != nil {
		if err := m.ReadOnlyUI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readOnlyUI")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readOnlyUI")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateTemplates(ctx context.Context, formats strfmt.Registry) error {

	if m.Templates != nil {
		if err := m.Templates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("templates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("templates")
			}
			return err
		}
	}

	return nil
}

func (m *Project) contextValidateVcsRoots(ctx context.Context, formats strfmt.Registry) error {

	if m.VcsRoots != nil {
		if err := m.VcsRoots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRoots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcsRoots")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Project) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Project) UnmarshalBinary(b []byte) error {
	var res Project
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
