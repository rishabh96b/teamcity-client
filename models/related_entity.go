// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RelatedEntity Represents a related entity.
//
// swagger:model relatedEntity
type RelatedEntity struct {

	// agent
	Agent *Agent `json:"agent,omitempty"`

	// agent pool
	AgentPool *AgentPool `json:"agentPool,omitempty"`

	// build
	Build *Build `json:"build,omitempty"`

	// build type
	BuildType *BuildType `json:"buildType,omitempty"`

	// change
	Change *Change `json:"change,omitempty"`

	// group
	Group *Group `json:"group,omitempty"`

	// internal Id
	InternalID string `json:"internalId,omitempty" xml:"internalId,attr,omitempty"`

	// problem
	Problem *Problem `json:"problem,omitempty"`

	// project
	Project *Project `json:"project,omitempty"`

	// test
	Test *Test `json:"test,omitempty"`

	// text
	Text string `json:"text,omitempty"`

	// type
	Type string `json:"type,omitempty" xml:"type,attr,omitempty"`

	// unknown
	Unknown bool `json:"unknown,omitempty" xml:"unknown,attr,omitempty"`

	// user
	User *User `json:"user,omitempty"`

	// vcs root
	VcsRoot *VcsRoot `json:"vcsRoot,omitempty"`
}

// Validate validates this related entity
func (m *RelatedEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentPool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsRoot(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedEntity) validateAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateAgentPool(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentPool) { // not required
		return nil
	}

	if m.AgentPool != nil {
		if err := m.AgentPool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentPool")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateBuildType(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildType) { // not required
		return nil
	}

	if m.BuildType != nil {
		if err := m.BuildType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildType")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateChange(formats strfmt.Registry) error {
	if swag.IsZero(m.Change) { // not required
		return nil
	}

	if m.Change != nil {
		if err := m.Change.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("change")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("change")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Group) { // not required
		return nil
	}

	if m.Group != nil {
		if err := m.Group.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateProblem(formats strfmt.Registry) error {
	if swag.IsZero(m.Problem) { // not required
		return nil
	}

	if m.Problem != nil {
		if err := m.Problem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("problem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("problem")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateProject(formats strfmt.Registry) error {
	if swag.IsZero(m.Project) { // not required
		return nil
	}

	if m.Project != nil {
		if err := m.Project.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateTest(formats strfmt.Registry) error {
	if swag.IsZero(m.Test) { // not required
		return nil
	}

	if m.Test != nil {
		if err := m.Test.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("test")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("test")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) validateVcsRoot(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsRoot) { // not required
		return nil
	}

	if m.VcsRoot != nil {
		if err := m.VcsRoot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRoot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcsRoot")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this related entity based on the context it is used
func (m *RelatedEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentPool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProblem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcsRoot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedEntity) contextValidateAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.Agent != nil {
		if err := m.Agent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateAgentPool(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentPool != nil {
		if err := m.AgentPool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentPool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentPool")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateBuild(ctx context.Context, formats strfmt.Registry) error {

	if m.Build != nil {
		if err := m.Build.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateBuildType(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildType != nil {
		if err := m.BuildType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildType")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateChange(ctx context.Context, formats strfmt.Registry) error {

	if m.Change != nil {
		if err := m.Change.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("change")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("change")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.Group != nil {
		if err := m.Group.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("group")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("group")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateProblem(ctx context.Context, formats strfmt.Registry) error {

	if m.Problem != nil {
		if err := m.Problem.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("problem")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("problem")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateProject(ctx context.Context, formats strfmt.Registry) error {

	if m.Project != nil {
		if err := m.Project.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateTest(ctx context.Context, formats strfmt.Registry) error {

	if m.Test != nil {
		if err := m.Test.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("test")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("test")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEntity) contextValidateVcsRoot(ctx context.Context, formats strfmt.Registry) error {

	if m.VcsRoot != nil {
		if err := m.VcsRoot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRoot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcsRoot")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelatedEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelatedEntity) UnmarshalBinary(b []byte) error {
	var res RelatedEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
