// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ParsedTestName Represents test metadata (package, method, class, and so on).
//
// swagger:model ParsedTestName
type ParsedTestName struct {

	// test class
	TestClass string `json:"testClass,omitempty" xml:"testClass,attr,omitempty"`

	// test method name
	TestMethodName string `json:"testMethodName,omitempty" xml:"testMethodName,attr,omitempty"`

	// test name with parameters
	TestNameWithParameters string `json:"testNameWithParameters,omitempty" xml:"testNameWithParameters,attr,omitempty"`

	// test name without prefix
	TestNameWithoutPrefix string `json:"testNameWithoutPrefix,omitempty" xml:"testNameWithoutPrefix,attr,omitempty"`

	// test package
	TestPackage string `json:"testPackage,omitempty" xml:"testPackage,attr,omitempty"`

	// test short name
	TestShortName string `json:"testShortName,omitempty" xml:"testShortName,attr,omitempty"`

	// test suite
	TestSuite string `json:"testSuite,omitempty" xml:"testSuite,attr,omitempty"`
}

// Validate validates this parsed test name
func (m *ParsedTestName) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this parsed test name based on context it is used
func (m *ParsedTestName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParsedTestName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParsedTestName) UnmarshalBinary(b []byte) error {
	var res ParsedTestName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
