// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Token Represents an authentication token.
//
// swagger:model token
type Token struct {

	// creation time
	// Format: date-time
	CreationTime strfmt.DateTime `json:"creationTime,omitempty" xml:"creationTime,attr,omitempty"`

	// expiration time
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expirationTime,omitempty" xml:"expirationTime,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// permission restrictions
	PermissionRestrictions *PermissionRestrictions `json:"permissionRestrictions,omitempty"`

	// value
	Value string `json:"value,omitempty" xml:"value,attr,omitempty"`
}

// Validate validates this token
func (m *Token) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Token) validateCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("creationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Token) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationTime", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Token) validatePermissionRestrictions(formats strfmt.Registry) error {
	if swag.IsZero(m.PermissionRestrictions) { // not required
		return nil
	}

	if m.PermissionRestrictions != nil {
		if err := m.PermissionRestrictions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionRestrictions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissionRestrictions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this token based on the context it is used
func (m *Token) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePermissionRestrictions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Token) contextValidatePermissionRestrictions(ctx context.Context, formats strfmt.Registry) error {

	if m.PermissionRestrictions != nil {
		if err := m.PermissionRestrictions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionRestrictions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissionRestrictions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Token) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Token) UnmarshalBinary(b []byte) error {
	var res Token
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
