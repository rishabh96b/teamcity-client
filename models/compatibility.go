// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Compatibility Represents a compatibility relation between the agent and build configuration.
//
// swagger:model compatibility
type Compatibility struct {

	// agent
	Agent *Agent `json:"agent,omitempty"`

	// build type
	BuildType *BuildType `json:"buildType,omitempty"`

	// compatible
	Compatible bool `json:"compatible,omitempty" xml:"compatible,attr,omitempty"`

	// unmet requirements
	UnmetRequirements *Requirements `json:"unmetRequirements,omitempty"`
}

// Validate validates this compatibility
func (m *Compatibility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmetRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Compatibility) validateAgent(formats strfmt.Registry) error {
	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *Compatibility) validateBuildType(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildType) { // not required
		return nil
	}

	if m.BuildType != nil {
		if err := m.BuildType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildType")
			}
			return err
		}
	}

	return nil
}

func (m *Compatibility) validateUnmetRequirements(formats strfmt.Registry) error {
	if swag.IsZero(m.UnmetRequirements) { // not required
		return nil
	}

	if m.UnmetRequirements != nil {
		if err := m.UnmetRequirements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unmetRequirements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unmetRequirements")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this compatibility based on the context it is used
func (m *Compatibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnmetRequirements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Compatibility) contextValidateAgent(ctx context.Context, formats strfmt.Registry) error {

	if m.Agent != nil {
		if err := m.Agent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *Compatibility) contextValidateBuildType(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildType != nil {
		if err := m.BuildType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildType")
			}
			return err
		}
	}

	return nil
}

func (m *Compatibility) contextValidateUnmetRequirements(ctx context.Context, formats strfmt.Registry) error {

	if m.UnmetRequirements != nil {
		if err := m.UnmetRequirements.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unmetRequirements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unmetRequirements")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Compatibility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Compatibility) UnmarshalBinary(b []byte) error {
	var res Compatibility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
