// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BranchVersion Represents a branch version.
//
// swagger:model branchVersion
type BranchVersion struct {

	// active
	Active bool `json:"active,omitempty" xml:"active,attr,omitempty"`

	// builds
	Builds *Builds `json:"builds,omitempty"`

	// default
	Default bool `json:"default,omitempty" xml:"default,attr,omitempty"`

	// group flag
	GroupFlag bool `json:"groupFlag,omitempty" xml:"groupFlag,attr,omitempty"`

	// internal name
	InternalName string `json:"internalName,omitempty" xml:"internalName,attr,omitempty"`

	// last activity
	LastActivity string `json:"lastActivity,omitempty" xml:"lastActivity,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// unspecified
	Unspecified bool `json:"unspecified,omitempty" xml:"unspecified,attr,omitempty"`

	// version
	Version string `json:"version,omitempty" xml:"version,attr,omitempty"`
}

// Validate validates this branch version
func (m *BranchVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuilds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchVersion) validateBuilds(formats strfmt.Registry) error {
	if swag.IsZero(m.Builds) { // not required
		return nil
	}

	if m.Builds != nil {
		if err := m.Builds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("builds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("builds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this branch version based on the context it is used
func (m *BranchVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuilds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchVersion) contextValidateBuilds(ctx context.Context, formats strfmt.Registry) error {

	if m.Builds != nil {
		if err := m.Builds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("builds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("builds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchVersion) UnmarshalBinary(b []byte) error {
	var res BranchVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
