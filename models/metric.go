// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Metric Represents the specific server metric.
//
// swagger:model metric
type Metric struct {

	// description
	Description string `json:"description,omitempty" xml:"description,attr,omitempty"`

	// metric tags
	MetricTags *MetricTags `json:"metricTags,omitempty"`

	// metric values
	MetricValues *MetricValues `json:"metricValues,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// prometheus name
	PrometheusName string `json:"prometheusName,omitempty" xml:"prometheusName,attr,omitempty"`
}

// Validate validates this metric
func (m *Metric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metric) validateMetricTags(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricTags) { // not required
		return nil
	}

	if m.MetricTags != nil {
		if err := m.MetricTags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricTags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricTags")
			}
			return err
		}
	}

	return nil
}

func (m *Metric) validateMetricValues(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricValues) { // not required
		return nil
	}

	if m.MetricValues != nil {
		if err := m.MetricValues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricValues")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this metric based on the context it is used
func (m *Metric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetricTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Metric) contextValidateMetricTags(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricTags != nil {
		if err := m.MetricTags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricTags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricTags")
			}
			return err
		}
	}

	return nil
}

func (m *Metric) contextValidateMetricValues(ctx context.Context, formats strfmt.Registry) error {

	if m.MetricValues != nil {
		if err := m.MetricValues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metricValues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metricValues")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Metric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Metric) UnmarshalBinary(b []byte) error {
	var res Metric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
