// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Investigation Represents an investigation of a build problem.
//
// swagger:model investigation
type Investigation struct {

	// assignee
	Assignee *User `json:"assignee,omitempty"`

	// assignment
	Assignment *Comment `json:"assignment,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// resolution
	Resolution *Resolution `json:"resolution,omitempty"`

	// responsible
	Responsible *User `json:"responsible,omitempty"`

	// scope
	Scope *ProblemScope `json:"scope,omitempty"`

	// state
	State string `json:"state,omitempty" xml:"state,attr,omitempty"`

	// target
	Target *ProblemTarget `json:"target,omitempty"`
}

// Validate validates this investigation
func (m *Investigation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponsible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Investigation) validateAssignee(formats strfmt.Registry) error {
	if swag.IsZero(m.Assignee) { // not required
		return nil
	}

	if m.Assignee != nil {
		if err := m.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignee")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) validateAssignment(formats strfmt.Registry) error {
	if swag.IsZero(m.Assignment) { // not required
		return nil
	}

	if m.Assignment != nil {
		if err := m.Assignment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignment")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) validateResolution(formats strfmt.Registry) error {
	if swag.IsZero(m.Resolution) { // not required
		return nil
	}

	if m.Resolution != nil {
		if err := m.Resolution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolution")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) validateResponsible(formats strfmt.Registry) error {
	if swag.IsZero(m.Responsible) { // not required
		return nil
	}

	if m.Responsible != nil {
		if err := m.Responsible.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responsible")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responsible")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this investigation based on the context it is used
func (m *Investigation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResolution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponsible(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Investigation) contextValidateAssignee(ctx context.Context, formats strfmt.Registry) error {

	if m.Assignee != nil {
		if err := m.Assignee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignee")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) contextValidateAssignment(ctx context.Context, formats strfmt.Registry) error {

	if m.Assignment != nil {
		if err := m.Assignment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignment")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) contextValidateResolution(ctx context.Context, formats strfmt.Registry) error {

	if m.Resolution != nil {
		if err := m.Resolution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolution")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) contextValidateResponsible(ctx context.Context, formats strfmt.Registry) error {

	if m.Responsible != nil {
		if err := m.Responsible.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("responsible")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("responsible")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {
		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *Investigation) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Investigation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Investigation) UnmarshalBinary(b []byte) error {
	var res Investigation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
