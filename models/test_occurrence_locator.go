// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestOccurrenceLocator Represents a locator string for filtering TestOccurrence entities.
//
// swagger:model TestOccurrenceLocator
type TestOccurrenceLocator struct {

	// Project (direct or indirect parent) locator.
	AffectedProject string `json:"affectedProject,omitempty"`

	// branch
	Branch string `json:"branch,omitempty"`

	// Build locator.
	Build string `json:"build,omitempty"`

	// Build type locator.
	BuildType string `json:"buildType,omitempty"`

	// For paginated calls, how many entities to return per page.
	Count int32 `json:"count,omitempty"`

	// Is currently failing.
	CurrentlyFailing bool `json:"currentlyFailing,omitempty"`

	// Is currently investigated.
	CurrentlyInvestigated bool `json:"currentlyInvestigated,omitempty"`

	// currently muted
	CurrentlyMuted string `json:"currentlyMuted,omitempty"`

	// Entity ID.
	ID int32 `json:"id,omitempty"`

	// Is ignored.
	Ignored bool `json:"ignored,omitempty"`

	// include personal
	IncludePersonal bool `json:"includePersonal,omitempty"`

	// Supply multiple locators and return a union of the results.
	Item string `json:"item,omitempty"`

	// Limit processing to the latest `<lookupLimit>` entities.
	LookupLimit int32 `json:"lookupLimit,omitempty"`

	// Is muted.
	Muted bool `json:"muted,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// new failure
	NewFailure string `json:"newFailure,omitempty"`

	// For paginated calls, from which entity to start rendering the page.
	Start int32 `json:"start,omitempty"`

	// Supported values: unknown/normal/warning/failure/error.
	Status string `json:"status,omitempty"`

	// Test locator.
	Test string `json:"test,omitempty"`
}

// Validate validates this test occurrence locator
func (m *TestOccurrenceLocator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this test occurrence locator based on context it is used
func (m *TestOccurrenceLocator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TestOccurrenceLocator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestOccurrenceLocator) UnmarshalBinary(b []byte) error {
	var res TestOccurrenceLocator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
