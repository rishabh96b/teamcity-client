// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProgressInfo Represents a progress estimate of this build.
//
// swagger:model progress-info
type ProgressInfo struct {

	// current stage text
	CurrentStageText string `json:"currentStageText,omitempty" xml:"currentStageText,attr,omitempty"`

	// elapsed seconds
	ElapsedSeconds int64 `json:"elapsedSeconds,omitempty" xml:"elapsedSeconds,attr,omitempty"`

	// estimated total seconds
	EstimatedTotalSeconds int64 `json:"estimatedTotalSeconds,omitempty" xml:"estimatedTotalSeconds,attr,omitempty"`

	// last activity time
	LastActivityTime string `json:"lastActivityTime,omitempty" xml:"lastActivityTime,attr,omitempty"`

	// left seconds
	LeftSeconds int64 `json:"leftSeconds,omitempty" xml:"leftSeconds,attr,omitempty"`

	// outdated
	Outdated bool `json:"outdated,omitempty" xml:"outdated,attr,omitempty"`

	// outdated reason build
	OutdatedReasonBuild *Build `json:"outdatedReasonBuild,omitempty"`

	// percentage complete
	PercentageComplete int32 `json:"percentageComplete,omitempty" xml:"percentageComplete,attr,omitempty"`

	// probably hanging
	ProbablyHanging bool `json:"probablyHanging,omitempty" xml:"probablyHanging,attr,omitempty"`
}

// Validate validates this progress info
func (m *ProgressInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutdatedReasonBuild(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProgressInfo) validateOutdatedReasonBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.OutdatedReasonBuild) { // not required
		return nil
	}

	if m.OutdatedReasonBuild != nil {
		if err := m.OutdatedReasonBuild.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outdatedReasonBuild")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outdatedReasonBuild")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this progress info based on the context it is used
func (m *ProgressInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutdatedReasonBuild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProgressInfo) contextValidateOutdatedReasonBuild(ctx context.Context, formats strfmt.Registry) error {

	if m.OutdatedReasonBuild != nil {
		if err := m.OutdatedReasonBuild.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("outdatedReasonBuild")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("outdatedReasonBuild")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProgressInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProgressInfo) UnmarshalBinary(b []byte) error {
	var res ProgressInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
