// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserLocator Represents a locator string for filtering User entities.
//
// swagger:model UserLocator
type UserLocator struct {

	// User group (direct or indirect parent) locator.
	AffectedGroup string `json:"affectedGroup,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// User group (direct parent) locator.
	Group string `json:"group,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// Supply multiple locators and return a union of the results.
	Item string `json:"item,omitempty"`

	// last login
	// Format: date-time
	LastLogin strfmt.DateTime `json:"lastLogin,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// Supported matchType values:
	// - generic: exists/not-exists/equals/does-not-equal/starts-with/contains/does-not-contain/ends-with/any;
	// - regular expressions: matches/does-not-match;
	// - numeric: more-than/no-more-than/less-than/no-less-than;
	// - version-specific: ver-more-than/ver-no-more-than/ver-less-than/ver-no-less-than.
	Property string `json:"property,omitempty"`

	// Role locator.
	Role string `json:"role,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this user locator
func (m *UserLocator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastLogin(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLocator) validateLastLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.LastLogin) { // not required
		return nil
	}

	if err := validate.FormatOf("lastLogin", "body", "date-time", m.LastLogin.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user locator based on context it is used
func (m *UserLocator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserLocator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLocator) UnmarshalBinary(b []byte) error {
	var res UserLocator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
