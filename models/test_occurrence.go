// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TestOccurrence Represents a relation between a test and the specific build.
//
// swagger:model testOccurrence
type TestOccurrence struct {

	// build
	Build *Build `json:"build,omitempty"`

	// currently investigated
	CurrentlyInvestigated bool `json:"currentlyInvestigated,omitempty" xml:"currentlyInvestigated,attr,omitempty"`

	// currently muted
	CurrentlyMuted bool `json:"currentlyMuted,omitempty" xml:"currentlyMuted,attr,omitempty"`

	// details
	Details string `json:"details,omitempty"`

	// duration
	Duration int32 `json:"duration,omitempty" xml:"duration,attr,omitempty"`

	// first failed
	FirstFailed *TestOccurrence `json:"firstFailed,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// ignore details
	IgnoreDetails string `json:"ignoreDetails,omitempty"`

	// ignored
	Ignored bool `json:"ignored,omitempty" xml:"ignored,attr,omitempty"`

	// invocations
	Invocations *TestOccurrences `json:"invocations,omitempty"`

	// log anchor
	LogAnchor string `json:"logAnchor,omitempty" xml:"logAnchor,attr,omitempty"`

	// metadata
	Metadata *TestRunMetadata `json:"metadata,omitempty"`

	// mute
	Mute *Mute `json:"mute,omitempty"`

	// muted
	Muted bool `json:"muted,omitempty" xml:"muted,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// new failure
	NewFailure bool `json:"newFailure,omitempty" xml:"newFailure,attr,omitempty"`

	// next fixed
	NextFixed *TestOccurrence `json:"nextFixed,omitempty"`

	// run order
	RunOrder string `json:"runOrder,omitempty" xml:"runOrder,attr,omitempty"`

	// status
	Status string `json:"status,omitempty" xml:"status,attr,omitempty"`

	// test
	Test *Test `json:"test,omitempty"`
}

// Validate validates this test occurrence
func (m *TestOccurrence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstFailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextFixed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestOccurrence) validateBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) validateFirstFailed(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstFailed) { // not required
		return nil
	}

	if m.FirstFailed != nil {
		if err := m.FirstFailed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstFailed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstFailed")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) validateInvocations(formats strfmt.Registry) error {
	if swag.IsZero(m.Invocations) { // not required
		return nil
	}

	if m.Invocations != nil {
		if err := m.Invocations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invocations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invocations")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) validateMute(formats strfmt.Registry) error {
	if swag.IsZero(m.Mute) { // not required
		return nil
	}

	if m.Mute != nil {
		if err := m.Mute.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mute")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) validateNextFixed(formats strfmt.Registry) error {
	if swag.IsZero(m.NextFixed) { // not required
		return nil
	}

	if m.NextFixed != nil {
		if err := m.NextFixed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextFixed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nextFixed")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) validateTest(formats strfmt.Registry) error {
	if swag.IsZero(m.Test) { // not required
		return nil
	}

	if m.Test != nil {
		if err := m.Test.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("test")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("test")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this test occurrence based on the context it is used
func (m *TestOccurrence) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirstFailed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNextFixed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TestOccurrence) contextValidateBuild(ctx context.Context, formats strfmt.Registry) error {

	if m.Build != nil {
		if err := m.Build.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) contextValidateFirstFailed(ctx context.Context, formats strfmt.Registry) error {

	if m.FirstFailed != nil {
		if err := m.FirstFailed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstFailed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstFailed")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) contextValidateInvocations(ctx context.Context, formats strfmt.Registry) error {

	if m.Invocations != nil {
		if err := m.Invocations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invocations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invocations")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {
		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) contextValidateMute(ctx context.Context, formats strfmt.Registry) error {

	if m.Mute != nil {
		if err := m.Mute.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mute")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mute")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) contextValidateNextFixed(ctx context.Context, formats strfmt.Registry) error {

	if m.NextFixed != nil {
		if err := m.NextFixed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nextFixed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nextFixed")
			}
			return err
		}
	}

	return nil
}

func (m *TestOccurrence) contextValidateTest(ctx context.Context, formats strfmt.Registry) error {

	if m.Test != nil {
		if err := m.Test.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("test")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("test")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TestOccurrence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TestOccurrence) UnmarshalBinary(b []byte) error {
	var res TestOccurrence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
