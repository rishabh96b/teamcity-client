// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FileChange Represents the specific file change (in the scope of the commit).
//
// swagger:model FileChange
type FileChange struct {

	// after revision
	AfterRevision string `json:"after-revision,omitempty" xml:"after-revision,attr,omitempty"`

	// before revision
	BeforeRevision string `json:"before-revision,omitempty" xml:"before-revision,attr,omitempty"`

	// change type
	ChangeType string `json:"changeType,omitempty" xml:"changeType,attr,omitempty"`

	// change type comment
	ChangeTypeComment string `json:"changeTypeComment,omitempty" xml:"changeTypeComment,attr,omitempty"`

	// directory
	Directory bool `json:"directory,omitempty" xml:"directory,attr,omitempty"`

	// file
	File string `json:"file,omitempty" xml:"file,attr,omitempty"`

	// relative file
	RelativeFile string `json:"relative-file,omitempty" xml:"relative-file,attr,omitempty"`
}

// Validate validates this file change
func (m *FileChange) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this file change based on context it is used
func (m *FileChange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileChange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileChange) UnmarshalBinary(b []byte) error {
	var res FileChange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
