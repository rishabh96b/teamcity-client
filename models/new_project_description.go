// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewProjectDescription Represents a project stub.
//
// swagger:model newProjectDescription
type NewProjectDescription struct {

	// build types ids map
	BuildTypesIdsMap *Properties `json:"buildTypesIdsMap,omitempty"`

	// copy all associated settings
	CopyAllAssociatedSettings bool `json:"copyAllAssociatedSettings,omitempty" xml:"copyAllAssociatedSettings,attr,omitempty"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// parent project
	ParentProject *Project `json:"parentProject,omitempty"`

	// projects ids map
	ProjectsIdsMap *Properties `json:"projectsIdsMap,omitempty"`

	// source project
	SourceProject *Project `json:"sourceProject,omitempty"`

	// source project locator
	SourceProjectLocator string `json:"sourceProjectLocator,omitempty" xml:"sourceProjectLocator,attr,omitempty"`

	// vcs roots ids map
	VcsRootsIdsMap *Properties `json:"vcsRootsIdsMap,omitempty"`
}

// Validate validates this new project description
func (m *NewProjectDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildTypesIdsMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectsIdsMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsRootsIdsMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewProjectDescription) validateBuildTypesIdsMap(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildTypesIdsMap) { // not required
		return nil
	}

	if m.BuildTypesIdsMap != nil {
		if err := m.BuildTypesIdsMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildTypesIdsMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildTypesIdsMap")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) validateParentProject(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentProject) { // not required
		return nil
	}

	if m.ParentProject != nil {
		if err := m.ParentProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentProject")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) validateProjectsIdsMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ProjectsIdsMap) { // not required
		return nil
	}

	if m.ProjectsIdsMap != nil {
		if err := m.ProjectsIdsMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectsIdsMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectsIdsMap")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) validateSourceProject(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceProject) { // not required
		return nil
	}

	if m.SourceProject != nil {
		if err := m.SourceProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceProject")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) validateVcsRootsIdsMap(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsRootsIdsMap) { // not required
		return nil
	}

	if m.VcsRootsIdsMap != nil {
		if err := m.VcsRootsIdsMap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRootsIdsMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcsRootsIdsMap")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this new project description based on the context it is used
func (m *NewProjectDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuildTypesIdsMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjectsIdsMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcsRootsIdsMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewProjectDescription) contextValidateBuildTypesIdsMap(ctx context.Context, formats strfmt.Registry) error {

	if m.BuildTypesIdsMap != nil {
		if err := m.BuildTypesIdsMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buildTypesIdsMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buildTypesIdsMap")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) contextValidateParentProject(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentProject != nil {
		if err := m.ParentProject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentProject")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) contextValidateProjectsIdsMap(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectsIdsMap != nil {
		if err := m.ProjectsIdsMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projectsIdsMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projectsIdsMap")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) contextValidateSourceProject(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceProject != nil {
		if err := m.SourceProject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceProject")
			}
			return err
		}
	}

	return nil
}

func (m *NewProjectDescription) contextValidateVcsRootsIdsMap(ctx context.Context, formats strfmt.Registry) error {

	if m.VcsRootsIdsMap != nil {
		if err := m.VcsRootsIdsMap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcsRootsIdsMap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcsRootsIdsMap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewProjectDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewProjectDescription) UnmarshalBinary(b []byte) error {
	var res NewProjectDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
