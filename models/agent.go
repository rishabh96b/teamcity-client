// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Agent Represents a known agent instance.
//
// swagger:model agent
type Agent struct {

	// authorized
	Authorized bool `json:"authorized,omitempty" xml:"authorized,attr,omitempty"`

	// authorized info
	AuthorizedInfo *AuthorizedInfo `json:"authorizedInfo,omitempty"`

	// build
	Build *Build `json:"build,omitempty"`

	// builds
	Builds *Builds `json:"builds,omitempty"`

	// cloud image
	CloudImage *CloudImage `json:"cloudImage,omitempty"`

	// cloud instance
	CloudInstance *CloudInstance `json:"cloudInstance,omitempty"`

	// compatibility policy
	CompatibilityPolicy *CompatibilityPolicy `json:"compatibilityPolicy,omitempty"`

	// compatible build types
	CompatibleBuildTypes *BuildTypes `json:"compatibleBuildTypes,omitempty"`

	// connected
	Connected bool `json:"connected,omitempty" xml:"connected,attr,omitempty"`

	// cpu rank
	CPURank int32 `json:"cpuRank,omitempty" xml:"cpuRank,attr,omitempty"`

	// current agent version
	CurrentAgentVersion string `json:"currentAgentVersion,omitempty" xml:"currentAgentVersion,attr,omitempty"`

	// disconnection comment
	DisconnectionComment string `json:"disconnectionComment,omitempty" xml:"disconnectionComment,attr,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty" xml:"enabled,attr,omitempty"`

	// enabled info
	EnabledInfo *EnabledInfo `json:"enabledInfo,omitempty"`

	// environment
	Environment *Environment `json:"environment,omitempty"`

	// host
	Host string `json:"host,omitempty" xml:"host,attr,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID int32 `json:"id,omitempty" xml:"id,attr,omitempty"`

	// idle since time
	IdleSinceTime string `json:"idleSinceTime,omitempty" xml:"idleSinceTime,attr,omitempty"`

	// incompatible build types
	IncompatibleBuildTypes *Compatibilities `json:"incompatibleBuildTypes,omitempty"`

	// ip
	IP string `json:"ip,omitempty" xml:"ip,attr,omitempty"`

	// java outdated
	JavaOutdated bool `json:"javaOutdated,omitempty" xml:"javaOutdated,attr,omitempty"`

	// last activity time
	LastActivityTime string `json:"lastActivityTime,omitempty" xml:"lastActivityTime,attr,omitempty"`

	// links
	Links *Links `json:"links,omitempty"`

	// locator
	Locator string `json:"locator,omitempty" xml:"locator,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// outdated
	Outdated bool `json:"outdated,omitempty" xml:"outdated,attr,omitempty"`

	// plugins outdated
	PluginsOutdated bool `json:"pluginsOutdated,omitempty" xml:"pluginsOutdated,attr,omitempty"`

	// pool
	Pool *AgentPool `json:"pool,omitempty"`

	// port
	Port int32 `json:"port,omitempty" xml:"port,attr,omitempty"`

	// properties
	Properties *Properties `json:"properties,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty" xml:"protocol,attr,omitempty"`

	// registration timestamp
	RegistrationTimestamp string `json:"registrationTimestamp,omitempty" xml:"registrationTimestamp,attr,omitempty"`

	// type Id
	TypeID int32 `json:"typeId,omitempty" xml:"typeId,attr,omitempty"`

	// uptodate
	Uptodate bool `json:"uptodate,omitempty" xml:"uptodate,attr,omitempty"`

	// version
	Version string `json:"version,omitempty" xml:"version,attr,omitempty"`

	// web Url
	WebURL string `json:"webUrl,omitempty" xml:"webUrl,attr,omitempty"`
}

// Validate validates this agent
func (m *Agent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizedInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuilds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudInstance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompatibilityPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompatibleBuildTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabledInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncompatibleBuildTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Agent) validateAuthorizedInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizedInfo) { // not required
		return nil
	}

	if m.AuthorizedInfo != nil {
		if err := m.AuthorizedInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorizedInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorizedInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateBuilds(formats strfmt.Registry) error {
	if swag.IsZero(m.Builds) { // not required
		return nil
	}

	if m.Builds != nil {
		if err := m.Builds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("builds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("builds")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateCloudImage(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudImage) { // not required
		return nil
	}

	if m.CloudImage != nil {
		if err := m.CloudImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudImage")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateCloudInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudInstance) { // not required
		return nil
	}

	if m.CloudInstance != nil {
		if err := m.CloudInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudInstance")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateCompatibilityPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.CompatibilityPolicy) { // not required
		return nil
	}

	if m.CompatibilityPolicy != nil {
		if err := m.CompatibilityPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibilityPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibilityPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateCompatibleBuildTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.CompatibleBuildTypes) { // not required
		return nil
	}

	if m.CompatibleBuildTypes != nil {
		if err := m.CompatibleBuildTypes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibleBuildTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibleBuildTypes")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateEnabledInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.EnabledInfo) { // not required
		return nil
	}

	if m.EnabledInfo != nil {
		if err := m.EnabledInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enabledInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enabledInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if m.Environment != nil {
		if err := m.Environment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateIncompatibleBuildTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.IncompatibleBuildTypes) { // not required
		return nil
	}

	if m.IncompatibleBuildTypes != nil {
		if err := m.IncompatibleBuildTypes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incompatibleBuildTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incompatibleBuildTypes")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validatePool(formats strfmt.Registry) error {
	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {
		if err := m.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this agent based on the context it is used
func (m *Agent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorizedInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuilds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompatibilityPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompatibleBuildTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnabledInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvironment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncompatibleBuildTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Agent) contextValidateAuthorizedInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorizedInfo != nil {
		if err := m.AuthorizedInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authorizedInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authorizedInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateBuild(ctx context.Context, formats strfmt.Registry) error {

	if m.Build != nil {
		if err := m.Build.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateBuilds(ctx context.Context, formats strfmt.Registry) error {

	if m.Builds != nil {
		if err := m.Builds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("builds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("builds")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateCloudImage(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudImage != nil {
		if err := m.CloudImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudImage")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateCloudInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudInstance != nil {
		if err := m.CloudInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudInstance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudInstance")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateCompatibilityPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.CompatibilityPolicy != nil {
		if err := m.CompatibilityPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibilityPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibilityPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateCompatibleBuildTypes(ctx context.Context, formats strfmt.Registry) error {

	if m.CompatibleBuildTypes != nil {
		if err := m.CompatibleBuildTypes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatibleBuildTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("compatibleBuildTypes")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateEnabledInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.EnabledInfo != nil {
		if err := m.EnabledInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("enabledInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("enabledInfo")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateEnvironment(ctx context.Context, formats strfmt.Registry) error {

	if m.Environment != nil {
		if err := m.Environment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateIncompatibleBuildTypes(ctx context.Context, formats strfmt.Registry) error {

	if m.IncompatibleBuildTypes != nil {
		if err := m.IncompatibleBuildTypes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incompatibleBuildTypes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incompatibleBuildTypes")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidatePool(ctx context.Context, formats strfmt.Registry) error {

	if m.Pool != nil {
		if err := m.Pool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pool")
			}
			return err
		}
	}

	return nil
}

func (m *Agent) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {
		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Agent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Agent) UnmarshalBinary(b []byte) error {
	var res Agent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
