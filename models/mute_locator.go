// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MuteLocator Represents a locator string for filtering Mute entities.
//
// swagger:model MuteLocator
type MuteLocator struct {

	// Project (direct or indirect parent) locator.
	AffectedProject string `json:"affectedProject,omitempty"`

	// yyyyMMddTHHmmss+ZZZZ
	// Format: date-time
	CreationDate strfmt.DateTime `json:"creationDate,omitempty"`

	// id
	ID int32 `json:"id,omitempty"`

	// Supply multiple locators and return a union of the results.
	Item string `json:"item,omitempty"`

	// Problem locator.
	Problem string `json:"problem,omitempty"`

	// Project (direct parent) locator.
	Project string `json:"project,omitempty"`

	// User who muted this test.
	Reporter string `json:"reporter,omitempty"`

	// Supported values: manually/whenFixed/atTime.
	Resolution string `json:"resolution,omitempty"`

	// Test locator.
	Test string `json:"test,omitempty"`

	// Supported values: test/problem/anyProblem/unknown.
	Type string `json:"type,omitempty"`

	// yyyyMMddTHHmmss+ZZZZ
	// Format: date-time
	UnmuteDate strfmt.DateTime `json:"unmuteDate,omitempty"`
}

// Validate validates this mute locator
func (m *MuteLocator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmuteDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MuteLocator) validateCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("creationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MuteLocator) validateUnmuteDate(formats strfmt.Registry) error {
	if swag.IsZero(m.UnmuteDate) { // not required
		return nil
	}

	if err := validate.FormatOf("unmuteDate", "body", "date-time", m.UnmuteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mute locator based on context it is used
func (m *MuteLocator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MuteLocator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MuteLocator) UnmarshalBinary(b []byte) error {
	var res MuteLocator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
