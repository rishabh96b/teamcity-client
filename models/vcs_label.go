// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VcsLabel Represents a VCS-side label of this build's sources.
//
// swagger:model vcsLabel
type VcsLabel struct {

	// build Id
	BuildID int64 `json:"buildId,omitempty" xml:"buildId,attr,omitempty"`

	// failure reason
	FailureReason string `json:"failureReason,omitempty" xml:"failureReason,attr,omitempty"`

	// status
	Status string `json:"status,omitempty" xml:"status,attr,omitempty"`

	// text
	Text string `json:"text,omitempty" xml:"text,attr,omitempty"`

	// vcs root instance
	VcsRootInstance *VcsRootInstance `json:"vcs-root-instance,omitempty"`
}

// Validate validates this vcs label
func (m *VcsLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVcsRootInstance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcsLabel) validateVcsRootInstance(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsRootInstance) { // not required
		return nil
	}

	if m.VcsRootInstance != nil {
		if err := m.VcsRootInstance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs-root-instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs-root-instance")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vcs label based on the context it is used
func (m *VcsLabel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVcsRootInstance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VcsLabel) contextValidateVcsRootInstance(ctx context.Context, formats strfmt.Registry) error {

	if m.VcsRootInstance != nil {
		if err := m.VcsRootInstance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs-root-instance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs-root-instance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VcsLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VcsLabel) UnmarshalBinary(b []byte) error {
	var res VcsLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
