// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Problem Represents an issue with the test.
//
// swagger:model problem
type Problem struct {

	// description
	Description string `json:"description,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID string `json:"id,omitempty" xml:"id,attr,omitempty"`

	// identity
	Identity string `json:"identity,omitempty" xml:"identity,attr,omitempty"`

	// investigations
	Investigations *Investigations `json:"investigations,omitempty"`

	// locator
	Locator string `json:"locator,omitempty" xml:"locator,attr,omitempty"`

	// mutes
	Mutes *Mutes `json:"mutes,omitempty"`

	// problem occurrences
	ProblemOccurrences *ProblemOccurrences `json:"problemOccurrences,omitempty"`

	// type
	Type string `json:"type,omitempty" xml:"type,attr,omitempty"`
}

// Validate validates this problem
func (m *Problem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvestigations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProblemOccurrences(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Problem) validateInvestigations(formats strfmt.Registry) error {
	if swag.IsZero(m.Investigations) { // not required
		return nil
	}

	if m.Investigations != nil {
		if err := m.Investigations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("investigations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("investigations")
			}
			return err
		}
	}

	return nil
}

func (m *Problem) validateMutes(formats strfmt.Registry) error {
	if swag.IsZero(m.Mutes) { // not required
		return nil
	}

	if m.Mutes != nil {
		if err := m.Mutes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mutes")
			}
			return err
		}
	}

	return nil
}

func (m *Problem) validateProblemOccurrences(formats strfmt.Registry) error {
	if swag.IsZero(m.ProblemOccurrences) { // not required
		return nil
	}

	if m.ProblemOccurrences != nil {
		if err := m.ProblemOccurrences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("problemOccurrences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("problemOccurrences")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this problem based on the context it is used
func (m *Problem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvestigations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMutes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProblemOccurrences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Problem) contextValidateInvestigations(ctx context.Context, formats strfmt.Registry) error {

	if m.Investigations != nil {
		if err := m.Investigations.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("investigations")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("investigations")
			}
			return err
		}
	}

	return nil
}

func (m *Problem) contextValidateMutes(ctx context.Context, formats strfmt.Registry) error {

	if m.Mutes != nil {
		if err := m.Mutes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mutes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mutes")
			}
			return err
		}
	}

	return nil
}

func (m *Problem) contextValidateProblemOccurrences(ctx context.Context, formats strfmt.Registry) error {

	if m.ProblemOccurrences != nil {
		if err := m.ProblemOccurrences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("problemOccurrences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("problemOccurrences")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Problem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Problem) UnmarshalBinary(b []byte) error {
	var res Problem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
