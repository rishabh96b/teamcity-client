// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvestigationLocator Represents a locator string for filtering Investigation entities.
//
// swagger:model InvestigationLocator
type InvestigationLocator struct {

	// Project (direct or indirect parent) locator.
	AffectedProject string `json:"affectedProject,omitempty"`

	// assignee
	Assignee string `json:"assignee,omitempty"`

	// Project (direct parent) locator.
	AssignmentProject string `json:"assignmentProject,omitempty"`

	// Build type locator.
	BuildType string `json:"buildType,omitempty"`

	// For paginated calls, how many entities to return per page.
	Count int32 `json:"count,omitempty"`

	// Supply multiple locators and return a union of the results.
	Item string `json:"item,omitempty"`

	// Limit processing to the latest `<lookupLimit>` entities.
	LookupLimit int32 `json:"lookupLimit,omitempty"`

	// Problem locator.
	Problem string `json:"problem,omitempty"`

	// reporter
	Reporter string `json:"reporter,omitempty"`

	// Supported values: manually/whenFixed/atTime.
	Resolution string `json:"resolution,omitempty"`

	// yyyyMMddTHHmmss+ZZZZ
	// Format: date-time
	SinceDate strfmt.DateTime `json:"sinceDate,omitempty"`

	// For paginated calls, from which entity to start rendering the page.
	Start int32 `json:"start,omitempty"`

	// Supported values: taken/fixed/given_up/none.
	State string `json:"state,omitempty"`

	// Test locator.
	Test string `json:"test,omitempty"`

	// Supported values: test/problem/anyProblem/unknown.
	Type string `json:"type,omitempty"`
}

// Validate validates this investigation locator
func (m *InvestigationLocator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSinceDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvestigationLocator) validateSinceDate(formats strfmt.Registry) error {
	if swag.IsZero(m.SinceDate) { // not required
		return nil
	}

	if err := validate.FormatOf("sinceDate", "body", "date-time", m.SinceDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this investigation locator based on context it is used
func (m *InvestigationLocator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InvestigationLocator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvestigationLocator) UnmarshalBinary(b []byte) error {
	var res InvestigationLocator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
