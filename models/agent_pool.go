// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AgentPool Represents an agent pool instance.
//
// swagger:model agentPool
type AgentPool struct {

	// agents
	Agents *Agents `json:"agents,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID int32 `json:"id,omitempty" xml:"id,attr,omitempty"`

	// locator
	Locator string `json:"locator,omitempty" xml:"locator,attr,omitempty"`

	// max agents
	MaxAgents int32 `json:"maxAgents,omitempty" xml:"maxAgents,attr,omitempty"`

	// name
	Name string `json:"name,omitempty" xml:"name,attr,omitempty"`

	// owner project
	OwnerProject *Project `json:"ownerProject,omitempty"`

	// projects
	Projects *Projects `json:"projects,omitempty"`
}

// Validate validates this agent pool
func (m *AgentPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerProject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentPool) validateAgents(formats strfmt.Registry) error {
	if swag.IsZero(m.Agents) { // not required
		return nil
	}

	if m.Agents != nil {
		if err := m.Agents.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agents")
			}
			return err
		}
	}

	return nil
}

func (m *AgentPool) validateOwnerProject(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerProject) { // not required
		return nil
	}

	if m.OwnerProject != nil {
		if err := m.OwnerProject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerProject")
			}
			return err
		}
	}

	return nil
}

func (m *AgentPool) validateProjects(formats strfmt.Registry) error {
	if swag.IsZero(m.Projects) { // not required
		return nil
	}

	if m.Projects != nil {
		if err := m.Projects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this agent pool based on the context it is used
func (m *AgentPool) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwnerProject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentPool) contextValidateAgents(ctx context.Context, formats strfmt.Registry) error {

	if m.Agents != nil {
		if err := m.Agents.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agents")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agents")
			}
			return err
		}
	}

	return nil
}

func (m *AgentPool) contextValidateOwnerProject(ctx context.Context, formats strfmt.Registry) error {

	if m.OwnerProject != nil {
		if err := m.OwnerProject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ownerProject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ownerProject")
			}
			return err
		}
	}

	return nil
}

func (m *AgentPool) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	if m.Projects != nil {
		if err := m.Projects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentPool) UnmarshalBinary(b []byte) error {
	var res AgentPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
