// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuildLocator Represents a locator string for filtering Build entities.
//
// swagger:model BuildLocator
type BuildLocator struct {

	// Project (direct or indirect parent) locator.
	AffectedProject string `json:"affectedProject,omitempty"`

	// Agent locator.
	Agent string `json:"agent,omitempty"`

	// typeId of agent used to execute build.
	AgentTypeID int32 `json:"agentTypeId,omitempty"`

	// State can be any.
	Any bool `json:"any,omitempty"`

	// artifact dependency
	ArtifactDependency string `json:"artifactDependency,omitempty"`

	// Branch locator.
	Branch string `json:"branch,omitempty"`

	// Build type locator.
	BuildType string `json:"buildType,omitempty"`

	// Is canceled.
	Canceled bool `json:"canceled,omitempty"`

	// Agent locator.
	CompatibleAgent string `json:"compatibleAgent,omitempty"`

	// Is composite.
	Composite bool `json:"composite,omitempty"`

	// For paginated calls, how many entities to return per page.
	Count int32 `json:"count,omitempty"`

	// If true, applies default filter which returns only "normal" builds (finished builds which are not canceled, not failed-to-start, not personal, and on default branch (in branched build configurations)).
	DefaultFilter bool `json:"defaultFilter,omitempty"`

	// Is failed to start.
	FailedToStart bool `json:"failedToStart,omitempty"`

	// Requires either date or build dimension.
	FinishDate string `json:"finishDate,omitempty"`

	// Is finished.
	Finished bool `json:"finished,omitempty"`

	// Is hanging.
	Hanging bool `json:"hanging,omitempty"`

	// Is history build.
	History bool `json:"history,omitempty"`

	// Entity ID.
	ID int32 `json:"id,omitempty"`

	// Supply multiple locators and return a union of the results.
	Item string `json:"item,omitempty"`

	// Limit processing to the latest `<lookupLimit>` entities.
	LookupLimit int32 `json:"lookupLimit,omitempty"`

	// number
	Number string `json:"number,omitempty"`

	// Is a personal build.
	Personal bool `json:"personal,omitempty"`

	// Is pinned.
	Pinned bool `json:"pinned,omitempty"`

	// Project (direct parent) locator.
	Project string `json:"project,omitempty"`

	// Supported matchType values:
	// - generic: exists/not-exists/equals/does-not-equal/starts-with/contains/does-not-contain/ends-with/any;
	// - regular expressions: matches/does-not-match;
	// - numeric: more-than/no-more-than/less-than/no-less-than;
	// - version-specific: ver-more-than/ver-no-more-than/ver-less-than/ver-no-less-than.
	Property string `json:"property,omitempty"`

	// Is queued.
	Queued bool `json:"queued,omitempty"`

	// Requires either date or build dimension.
	QueuedDate string `json:"queuedDate,omitempty"`

	// Is running.
	Running bool `json:"running,omitempty"`

	// snapshot dependency
	SnapshotDependency string `json:"snapshotDependency,omitempty"`

	// For paginated calls, from which entity to start rendering the page.
	Start int32 `json:"start,omitempty"`

	// Requires either date or build dimension.
	StartDate string `json:"startDate,omitempty"`

	// Supported values: queued/running/finished/any.
	State string `json:"state,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// Tag locator.
	Tag string `json:"tag,omitempty"`

	// ID of a build or build promotion.
	TaskID int32 `json:"taskId,omitempty"`

	// User locator.
	User string `json:"user,omitempty"`
}

// Validate validates this build locator
func (m *BuildLocator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this build locator based on context it is used
func (m *BuildLocator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BuildLocator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildLocator) UnmarshalBinary(b []byte) error {
	var res BuildLocator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
