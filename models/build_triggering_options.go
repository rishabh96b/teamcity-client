// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuildTriggeringOptions Represents the dependency/queue settings with which this build has been started.
//
// swagger:model buildTriggeringOptions
type BuildTriggeringOptions struct {

	// clean sources
	CleanSources bool `json:"cleanSources,omitempty" xml:"cleanSources,attr,omitempty"`

	// clean sources in all dependencies
	CleanSourcesInAllDependencies bool `json:"cleanSourcesInAllDependencies,omitempty" xml:"cleanSourcesInAllDependencies,attr,omitempty"`

	// freeze settings
	FreezeSettings bool `json:"freezeSettings,omitempty" xml:"freezeSettings,attr,omitempty"`

	// queue at top
	QueueAtTop bool `json:"queueAtTop,omitempty" xml:"queueAtTop,attr,omitempty"`

	// rebuild all dependencies
	RebuildAllDependencies bool `json:"rebuildAllDependencies,omitempty" xml:"rebuildAllDependencies,attr,omitempty"`

	// rebuild dependencies
	RebuildDependencies *BuildTypes `json:"rebuildDependencies,omitempty"`

	// rebuild failed or incomplete dependencies
	RebuildFailedOrIncompleteDependencies bool `json:"rebuildFailedOrIncompleteDependencies,omitempty" xml:"rebuildFailedOrIncompleteDependencies,attr,omitempty"`

	// tag dependencies
	TagDependencies bool `json:"tagDependencies,omitempty" xml:"tagDependencies,attr,omitempty"`
}

// Validate validates this build triggering options
func (m *BuildTriggeringOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRebuildDependencies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildTriggeringOptions) validateRebuildDependencies(formats strfmt.Registry) error {
	if swag.IsZero(m.RebuildDependencies) { // not required
		return nil
	}

	if m.RebuildDependencies != nil {
		if err := m.RebuildDependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rebuildDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rebuildDependencies")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this build triggering options based on the context it is used
func (m *BuildTriggeringOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRebuildDependencies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuildTriggeringOptions) contextValidateRebuildDependencies(ctx context.Context, formats strfmt.Registry) error {

	if m.RebuildDependencies != nil {
		if err := m.RebuildDependencies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rebuildDependencies")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rebuildDependencies")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuildTriggeringOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuildTriggeringOptions) UnmarshalBinary(b []byte) error {
	var res BuildTriggeringOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
