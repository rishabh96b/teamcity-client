// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Mute Represents a muted test.
//
// swagger:model mute
type Mute struct {

	// assignment
	Assignment *Comment `json:"assignment,omitempty"`

	// href
	Href string `json:"href,omitempty" xml:"href,attr,omitempty"`

	// id
	ID int32 `json:"id,omitempty" xml:"id,attr,omitempty"`

	// resolution
	Resolution *Resolution `json:"resolution,omitempty"`

	// scope
	Scope *ProblemScope `json:"scope,omitempty"`

	// target
	Target *ProblemTarget `json:"target,omitempty"`
}

// Validate validates this mute
func (m *Mute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Mute) validateAssignment(formats strfmt.Registry) error {
	if swag.IsZero(m.Assignment) { // not required
		return nil
	}

	if m.Assignment != nil {
		if err := m.Assignment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignment")
			}
			return err
		}
	}

	return nil
}

func (m *Mute) validateResolution(formats strfmt.Registry) error {
	if swag.IsZero(m.Resolution) { // not required
		return nil
	}

	if m.Resolution != nil {
		if err := m.Resolution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolution")
			}
			return err
		}
	}

	return nil
}

func (m *Mute) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *Mute) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mute based on the context it is used
func (m *Mute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssignment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResolution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Mute) contextValidateAssignment(ctx context.Context, formats strfmt.Registry) error {

	if m.Assignment != nil {
		if err := m.Assignment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assignment")
			}
			return err
		}
	}

	return nil
}

func (m *Mute) contextValidateResolution(ctx context.Context, formats strfmt.Registry) error {

	if m.Resolution != nil {
		if err := m.Resolution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resolution")
			}
			return err
		}
	}

	return nil
}

func (m *Mute) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	if m.Scope != nil {
		if err := m.Scope.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

func (m *Mute) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {
		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Mute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Mute) UnmarshalBinary(b []byte) error {
	var res Mute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
